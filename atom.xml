<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WillBean&#39;s Blog</title>
  <subtitle>我可能是个假程序猿吧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://willbean.github.io/"/>
  <updated>2017-07-04T13:47:01.030Z</updated>
  <id>https://willbean.github.io/</id>
  
  <author>
    <name>WillBean</name>
    <email>182769979@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES5规范回顾系列(二)——内置对象</title>
    <link href="https://willbean.github.io/2017/07/02/es5-review-2/"/>
    <id>https://willbean.github.io/2017/07/02/es5-review-2/</id>
    <published>2017-07-02T06:36:03.000Z</published>
    <updated>2017-07-04T13:47:01.030Z</updated>
    
    <content type="html"><![CDATA[<p>下文摘自<a href="https://www.w3.org/html/ig/zh/wiki/ES5/builtins" target="_blank" rel="external">ES5/标准 ECMAScript 内置对象</a></p>
<h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p>唯一的全局对象在控制进入任何执行环境前被创建。</p>
<p>除非另外指明，全局对象的标准内置属性拥有特性 {[[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}。</p>
<p>全局对象没有 [[Construct]] 内部属性 ; 全局对象不可能当做构造器用 new 运算符调用。</p>
<p>全局对象没有 [[Call]] 内部属性，全局对象不可能当做函数来调用。</p>
<p>全局对象的 [[Prototype]] 和 [[Class]] 内部属性值是依赖于实现的。</p>
<p>除了本规范定义的属性之外，全局对象还可以拥有额外的宿主定义的属性。全局对象可包含一个值是全局对象自身的属性；例如，在 HTML 文档对象模型中全局对象的 window 属性是全局对象自身。 </p>
<h3 id="全局对象的值属性"><a href="#全局对象的值属性" class="headerlink" title="全局对象的值属性"></a>全局对象的值属性</h3><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><p>NaN 的值是 NaN。这个属性拥有特性 { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }。</p>
<h4 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h4><p>Infinity 的值是 +∞。这个属性拥有特性 { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }。</p>
<h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><p>undefined 的值是 undefined。这个属性拥有特性 &lt;{ [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }。</p>
<h3 id="全局对象的函数属性"><a href="#全局对象的函数属性" class="headerlink" title="全局对象的函数属性"></a>全局对象的函数属性</h3><h4 id="eval-x"><a href="#eval-x" class="headerlink" title="eval (x)"></a>eval (x)</h4><h4 id="parseInt-string-radix"><a href="#parseInt-string-radix" class="headerlink" title="parseInt (string, radix)"></a>parseInt (string, radix)</h4><h4 id="parseFloat-string"><a href="#parseFloat-string" class="headerlink" title="parseFloat (string)"></a>parseFloat (string)</h4><h4 id="isNaN-number"><a href="#isNaN-number" class="headerlink" title="isNaN (number)"></a>isNaN (number)</h4><h4 id="isFinite-number"><a href="#isFinite-number" class="headerlink" title="isFinite (number)"></a>isFinite (number)</h4><h3 id="处理-URI-的函数属性"><a href="#处理-URI-的函数属性" class="headerlink" title="处理 URI 的函数属性"></a>处理 URI 的函数属性</h3><h4 id="decodeURI-encodedURI"><a href="#decodeURI-encodedURI" class="headerlink" title="decodeURI (encodedURI)"></a>decodeURI (encodedURI)</h4><p>decodeURI 函数计算出一个新版 URI，将 URI 中可能是 encodeURI 函数引入的每个转义序列和 UTF-8 编码组替换为代表它们的字符。不是 encodeURI 导入的转义序列不会被替换。 </p>
<h4 id="decodeURIComponent-encodedURIComponent"><a href="#decodeURIComponent-encodedURIComponent" class="headerlink" title="decodeURIComponent (encodedURIComponent)"></a>decodeURIComponent (encodedURIComponent)</h4><p>decodeURIComponent 函数计算出一个新版 URI，将 URI 中可能是 encodeURIComponent 函数引入的每个转义序列和 UTF-8 编码组替换为代表它们的字符。 </p>
<h4 id="encodeURI-uri"><a href="#encodeURI-uri" class="headerlink" title="encodeURI (uri)"></a>encodeURI (uri)</h4><p>encodeURI 函数计算出一个新版 URI，将 URI 中某些字符的每个实例替换为代表这些字符 UTF-8 编码的一个，两个或三个转义序列。</p>
<h4 id="encodeURIComponent-uriComponent"><a href="#encodeURIComponent-uriComponent" class="headerlink" title="encodeURIComponent (uriComponent)"></a>encodeURIComponent (uriComponent)</h4><p>encodeURIComponent 函数计算出一个新版 URI，将 URI 中某些字符的每个实例替换为代表这些字符 UTF-8 编码的一个，两个或三个转义序列。 </p>
<p>*encodeURI 和 decodeURI 函数操作的是完整的 URI；这俩函数假定 URI 中的任何保留字符都有特殊意义，所有不会编码它们。encodeURIComponent 和 decodeURIComponent 函数操作的是组成 URI 的个别组件；这俩函数假定任何保留字符都代表普通文本，所以必须编码它们，所以它们出现在组成一个完整 URI 的组件里面时不会解释成保留字符了。</p>
<h3 id="全局对象的构造器属性"><a href="#全局对象的构造器属性" class="headerlink" title="全局对象的构造器属性"></a>全局对象的构造器属性</h3><h4 id="Object"><a href="#Object" class="headerlink" title="Object ( . . . )"></a>Object ( . . . )</h4><h5 id="作为函数调用-Object-构造器"><a href="#作为函数调用-Object-构造器" class="headerlink" title="作为函数调用 Object 构造器"></a>作为函数调用 Object 构造器</h5><p>当把 Object 当做一个函数来调用，而不是一个构造器，它会执行一个类型转换。 </p>
<h6 id="Object-value"><a href="#Object-value" class="headerlink" title="Object ( [ value ] )"></a>Object ( [ value ] )</h6><p>当以一个参数 value 或者无参数调用 Object 函数，采用如下步骤：</p>
<ol>
<li>如果 value 是 null、undefined 或未指定，则创建并返回一个新 Object 对象，这个对象与仿佛用相同参数调用标准内置的 Object 构造器 的结果一样。</li>
<li>返回 ToObject(value)。</li>
</ol>
<h5 id="Object-构造器"><a href="#Object-构造器" class="headerlink" title="Object 构造器"></a>Object 构造器</h5><p>当 Object 是 new 表达式调用的一部分时，它是一个构造器，可创建一个对象。</p>
<h6 id="new-Object-value"><a href="#new-Object-value" class="headerlink" title="new Object ( [ value ] )"></a>new Object ( [ value ] )</h6><p>当以一个参数 value 或者无参数调用 Object 构造器，采用如下步骤：</p>
<pre><code>1. 如果提供了 value，则
    1. 如果 Type(value) 是 Object，则
        1. 如果 value 是个原生 ECMAScript 对象，不创建新对象，简单的返回 value。
        2. 如果 value 是宿主对象，则采取动作和返回依赖实现的结果的方式可以使依赖于宿主对象的。
    2. 如果 Type(value) 是 String，返回 ToObject(value)。
    3. 如果 Type(value) 是 Boolean，返回 ToObject(value)。
    4. 如果 Type(value) 是 Number，返回 ToObject(value)。
2. 断言：未提供参数 value 或其类型是 Null 或 Undefined。
3. 令 obj 为一个新创建的原生 ECMAScript 对象。
4. 设定 obj 的 [[Prototype]] 内部属性为标准内置的 Object 的 prototype 对象 (15.2.4)。
5. 设定 obj 的 [[Class]] 内部属性为 &quot;Object&quot;。
6. 设定 obj 的 [[Extensible]] 内部属性为 true。
7. 设定 obj 的 8.12 指定的所有内部方法
8. 返回 obj。
</code></pre><h5 id="Object-构造器的属性"><a href="#Object-构造器的属性" class="headerlink" title="Object 构造器的属性"></a>Object 构造器的属性</h5><p>Object 构造器的 [[Prototype]] 内部属性值是标准内置 Function 的 prototype 对象。</p>
<p>除了内部属性和 length 属性（其值是 1）之外，Object 构造器拥有以下属性： </p>
<h6 id="Object-prototype"><a href="#Object-prototype" class="headerlink" title="Object.prototype"></a>Object.prototype</h6><p>Object.prototype 的初始值是标准内置 Object 的 prototype 对象<br>这个属性包含特性 {[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false } </p>
<h6 id="Object-getPrototypeOf-O"><a href="#Object-getPrototypeOf-O" class="headerlink" title="Object.getPrototypeOf ( O )"></a>Object.getPrototypeOf ( O )</h6><p>当以参数 O 调用 getPrototypeOf 函数，采用如下步骤： </p>
<pre><code>1. 如果 Type(O) 不是 Object，则抛出一个 TypeError 异常。
2. 返回 O 的 [[Prototype]] 内部属性的值。
</code></pre><h6 id="Object-getOwnPropertyDescriptor-O-P"><a href="#Object-getOwnPropertyDescriptor-O-P" class="headerlink" title="Object.getOwnPropertyDescriptor ( O, P )"></a>Object.getOwnPropertyDescriptor ( O, P )</h6><p>当调用 getOwnPropertyDescriptor 函数，采用如下步骤：</p>
<pre><code>1. 如果 Type(O) 不是 Object，则抛出一个 TypeError 异常。
2. 令 name 为 ToString(P)。
3. 令 desc 为以参数 name 调用 O 的 [[GetOwnProperty]] 内部方法的结果。
4. 返回调用 FromPropertyDescriptor(desc) 的结果。
</code></pre><h6 id="Object-getOwnPropertyNames-O"><a href="#Object-getOwnPropertyNames-O" class="headerlink" title="Object.getOwnPropertyNames ( O )"></a>Object.getOwnPropertyNames ( O )</h6><h6 id="Object-create-O-Properties"><a href="#Object-create-O-Properties" class="headerlink" title="Object.create ( O [, Properties] )"></a>Object.create ( O [, Properties] )</h6><p>create 函数按照指定的原型创建一个新对象。当调用 create 函数，采用如下步骤： </p>
<pre><code>1. 如果 Type(O) 不是 Object 或 Null，则抛出一个 TypeError 异常。
2. 令 obj 为仿佛是用表达式 new Object() 创建新对象的结果，这里的 Object 是标准内置构造器名。 
3. 设定 obj 的 [[Prototype]] 内部属性为 O。
4. 如果传入了 Properties 参数并且不是 undefined，则仿佛是用 obj 和 Properties 当作参数调用标准内置函数 Object.defineProperties 一样给 obj 添加自身属性。
5. 返回 obj。
</code></pre><h6 id="Object-defineProperty-O-P-Attributes"><a href="#Object-defineProperty-O-P-Attributes" class="headerlink" title="Object.defineProperty ( O, P, Attributes )"></a>Object.defineProperty ( O, P, Attributes )</h6><p>defineProperty 函数用于给一个对象添加一个自身属性以及更新现有自身属性的特性。</p>
<h6 id="Object-defineProperties-O-Properties"><a href="#Object-defineProperties-O-Properties" class="headerlink" title="Object.defineProperties ( O, Properties )"></a>Object.defineProperties ( O, Properties )</h6><p>defineProperties 函数用于给一个对象添加一些自身属性以及更新现有的一些自身属性的特性。</p>
<h6 id="Object-seal-O"><a href="#Object-seal-O" class="headerlink" title="Object.seal ( O )"></a>Object.seal ( O )</h6><p>当调用 seal 函数，采用如下步骤： </p>
<pre><code>1. 如果 Type(O) 不是 Object，则抛出一个 TypeError 异常。
2. 对 O 的每个命名自身属性名 P,
    1. 令 desc 为以参数 P 调用 O 的 [[GetOwnProperty]] 内部方法的结果。
    2. 如果 desc.[[Configurable]] 是 true，设定 desc.[[Configurable]] 为 false。
    3. 以 P、desc、true 为参数调用 O 的 [[DefineOwnProperty]] 内部方法。
3. 设定 O 的 [[Extensible]] 内部属性为 false。
4. 返回 O。
</code></pre><h6 id="Object-freeze-O"><a href="#Object-freeze-O" class="headerlink" title="Object.freeze ( O )"></a>Object.freeze ( O )</h6><p>当调用 freeze 函数，采用如下步骤：</p>
<pre><code>1. 如果 Type(O) 不是 Object，则抛出一个 TypeError 异常。
2. 对 O 的每个命名自身属性名 P,
    1. 令 desc 为以参数 P 调用 O 的 [[GetOwnProperty]] 内部方法的结果。
    2. 如果 IsDataDescriptor(desc) 是 true，则
        1. 如果 desc.[[Writable]] 是 true，设定 desc。[[Writable]] 为 false.
    3. 如果 desc.[[Configurable]] 是 true，设定 desc。[[Configurable]] 为 false。
    4. 以 P、desc、true 作为参数调用 O 的 [[DefineOwnProperty]] 内部方法。
3. 设定 O 的 [[Extensible]] 内部属性为 false。
4. 返回 O。
</code></pre><h6 id="Object-preventExtensions-O"><a href="#Object-preventExtensions-O" class="headerlink" title="Object.preventExtensions ( O )"></a>Object.preventExtensions ( O )</h6><p>当调用 preventExtensions 函数，采用如下步骤：</p>
<pre><code>1. 如果 Type(O) 不是 Object，则抛出一个 TypeError 异常 .
2. 设定 O 的 [[Extensible]] 内部属性为 false。
3. 返回 O。
</code></pre><h6 id="Object-isSealed-O"><a href="#Object-isSealed-O" class="headerlink" title="Object.isSealed ( O )"></a>Object.isSealed ( O )</h6><h6 id="Object-isFrozen-O"><a href="#Object-isFrozen-O" class="headerlink" title="Object.isFrozen ( O )"></a>Object.isFrozen ( O )</h6><h6 id="Object-isExtensible-O"><a href="#Object-isExtensible-O" class="headerlink" title="Object.isExtensible ( O )"></a>Object.isExtensible ( O )</h6><h6 id="Object-keys-O"><a href="#Object-keys-O" class="headerlink" title="Object.keys ( O )"></a>Object.keys ( O )</h6><h5 id="Object-的-prototype-对象的属性"><a href="#Object-的-prototype-对象的属性" class="headerlink" title="Object 的 prototype 对象的属性"></a>Object 的 prototype 对象的属性</h5><p>Object 的 prototype 对象的 [[Prototype]] 内部属性的值是 null ，[[Class]] 内部属性的值是 “Object”，[[Extensible]] 内部属性的初始值是 true。 </p>
<h6 id="Object-prototype-constructor"><a href="#Object-prototype-constructor" class="headerlink" title="Object.prototype.constructor"></a>Object.prototype.constructor</h6><p>Object.prototype.constructor 的初始值是标准内置的 Object 构造器。 </p>
<h6 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString ( )"></a>Object.prototype.toString ( )</h6><p>当调用 toString 方法，采用如下步骤：</p>
<pre><code>1. 如果 this 的值是 undefined，返回 &quot;[object Undefined]&quot;。
2. 如果 this 的值是 null，返回 &quot;[object Null]&quot;。
3. 令 O 为以 this 作为参数调用 ToObject 的结果。
4. 令 class 为 O 的 [[Class]] 内部属性的值。
5. 返回三个字符串 &quot;[object &quot;、class 和 &quot;]&quot; 连起来的字符串。
</code></pre><h6 id="Object-prototype-toLocaleString"><a href="#Object-prototype-toLocaleString" class="headerlink" title="Object.prototype.toLocaleString ( )"></a>Object.prototype.toLocaleString ( )</h6><p>*toLocaleString 方法返回一个 String 对象，这个对象中包含了用当前区域设置的默认格式表示的日期。</p>
<h6 id="Object-prototype-valueOf"><a href="#Object-prototype-valueOf" class="headerlink" title="Object.prototype.valueOf ( )"></a>Object.prototype.valueOf ( )</h6><h6 id="Object-prototype-hasOwnProperty-V"><a href="#Object-prototype-hasOwnProperty-V" class="headerlink" title="Object.prototype.hasOwnProperty (V)"></a>Object.prototype.hasOwnProperty (V)</h6><h6 id="Object-prototype-isPrototypeOf-V"><a href="#Object-prototype-isPrototypeOf-V" class="headerlink" title="Object.prototype.isPrototypeOf (V)"></a>Object.prototype.isPrototypeOf (V)</h6><p>*Object.prototype == V.constructor.prototype</p>
<h6 id="Object-prototype-propertyIsEnumerable-V"><a href="#Object-prototype-propertyIsEnumerable-V" class="headerlink" title="Object.prototype.propertyIsEnumerable (V)"></a>Object.prototype.propertyIsEnumerable (V)</h6><p>*属性V是否可枚举</p>
<h4 id="Function"><a href="#Function" class="headerlink" title="Function ( . . . )"></a>Function ( . . . )</h4><h4 id="Array"><a href="#Array" class="headerlink" title="Array ( . . . )"></a>Array ( . . . )</h4><h5 id="数组原型对象的属性"><a href="#数组原型对象的属性" class="headerlink" title="数组原型对象的属性"></a>数组原型对象的属性</h5><h6 id="Array-prototype-constructor"><a href="#Array-prototype-constructor" class="headerlink" title="Array.prototype.constructor"></a>Array.prototype.constructor</h6><p>Array.prototype.constructor 的初始值是标准内置 Array 构造器。</p>
<h6 id="Array-prototype-toString"><a href="#Array-prototype-toString" class="headerlink" title="Array.prototype.toString ( )"></a>Array.prototype.toString ( )</h6><h6 id="Array-prototype-toLocaleString"><a href="#Array-prototype-toLocaleString" class="headerlink" title="Array.prototype.toLocaleString ( )"></a>Array.prototype.toLocaleString ( )</h6><p>先用数组元素的 toLocaleString 方法，将他们转换成字符串。然后将这些字符串串联，用一个分隔符分割，这里的分隔符字符串是与特定语言环境相关，由实现定义的方式得到的。调用这个函数的结果除了与特定语言环境关联之外，与 toString 的结果类似。</p>
<h6 id="Array-prototype-concat-item1-item2-…"><a href="#Array-prototype-concat-item1-item2-…" class="headerlink" title="Array.prototype.concat ( [ item1 [ , item2 [ , … ] ] ] )"></a>Array.prototype.concat ( [ item1 [ , item2 [ , … ] ] ] )</h6><p>当以零个或更多个参数 item1、item2，等，调用 concat 方法时，会返回一个数组。 返回的数组包含 调用对象的数组元素和随后顺序每个参数的数组元素。</p>
<h6 id="Array-prototype-join-separator"><a href="#Array-prototype-join-separator" class="headerlink" title="Array.prototype.join (separator)"></a>Array.prototype.join (separator)</h6><p>数组元素先被转换为字符串，再将这些字符串用 separator 分割连接在一起。如果没提供分隔符，将一个逗号用作分隔符。</p>
<h6 id="Array-prototype-pop"><a href="#Array-prototype-pop" class="headerlink" title="Array.prototype.pop ( )"></a>Array.prototype.pop ( )</h6><p>删除并返回数组的最后一个元素。</p>
<h6 id="Array-prototype-push-item1-item2-…"><a href="#Array-prototype-push-item1-item2-…" class="headerlink" title="Array.prototype.push ( [ item1 [ , item2 [ , … ] ] ] )"></a>Array.prototype.push ( [ item1 [ , item2 [ , … ] ] ] )</h6><p>将参数以他们出现的顺序追加到数组末尾。数组的新 length 属性值会作为调用的结果返回。</p>
<h6 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse ( )"></a>Array.prototype.reverse ( )</h6><p>重新排列数组元素，以翻转它们的顺序。对象会被当做调用的结果返回。</p>
<h6 id="Array-prototype-shift"><a href="#Array-prototype-shift" class="headerlink" title="Array.prototype.shift ( )"></a>Array.prototype.shift ( )</h6><p>删除并返回数组的第一个元素。</p>
<h6 id="Array-prototype-slice-start-end"><a href="#Array-prototype-slice-start-end" class="headerlink" title="Array.prototype.slice (start, end)"></a>Array.prototype.slice (start, end)</h6><p>slice 方法需要 start 和 end 两个参数，返回一个数组，这个数组包含从下标为 start 的元素到下标为 end（不含 end）的元素（或如果 end 是 undefined 就到数组末尾）。如果 start 为负，它会被当做是 length + start，这里的 length 是数组长度。如果 end 为负，它会被当做是 length + end，这里的 length 是数组长度。</p>
<h6 id="Array-prototype-sort-comparefn"><a href="#Array-prototype-sort-comparefn" class="headerlink" title="Array.prototype.sort (comparefn)"></a>Array.prototype.sort (comparefn)</h6><p>给 this 数组的元素排序。排序不一定是稳定的（相等的元素们不一定按照他们原来的顺序排列）。如果 comparefn 不是 undefined，它就必须是个函数，这个函数接受两个参数 x 和 y，如果 x &lt; y 返回一个负值，如果 x = y 返回零，如果 x &gt; y 返回一个正值。</p>
<h6 id="Array-prototype-splice-start-deleteCount-item1-item2-…"><a href="#Array-prototype-splice-start-deleteCount-item1-item2-…" class="headerlink" title="Array.prototype.splice (start, deleteCount [ , item1 [ , item2 [ , … ] ] ] )"></a>Array.prototype.splice (start, deleteCount [ , item1 [ , item2 [ , … ] ] ] )</h6><p>当以两个或更多参数 start、deleteCount 和（可选的）item1、item2, 等，调用 splice 方法，从数组索引 start 开始的 deleteCount 个数组元素会被替换为参数 item1、item2, 等。返回一个包含参数元素（如果有）的数组。</p>
<h6 id="Array-prototype-unshift-item1-item2-…"><a href="#Array-prototype-unshift-item1-item2-…" class="headerlink" title="Array.prototype.unshift ( [ item1 [ , item2 [ , … ] ] ] )"></a>Array.prototype.unshift ( [ item1 [ , item2 [ , … ] ] ] )</h6><p>将参数们插入到数组的开始位置，它们在数组中的顺序与它们出现在参数列表中的顺序相同。</p>
<h6 id="Array-prototype-indexOf-searchElement-fromIndex"><a href="#Array-prototype-indexOf-searchElement-fromIndex" class="headerlink" title="Array.prototype.indexOf ( searchElement [ , fromIndex ] )"></a>Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h6><p>indexOf 按照索引的升序比较 searchElement 和数组里的元素们，它使用内部的严格相等比较算法（11.9.6），如果找到一个或更多这样的位置，返回这些位置中第一个索引；否则返回 -1。</p>
<h6 id="Array-prototype-lastIndexOf-searchElement-fromIndex"><a href="#Array-prototype-lastIndexOf-searchElement-fromIndex" class="headerlink" title="Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )"></a>Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h6><h6 id="Array-prototype-every-callbackfn-thisArg"><a href="#Array-prototype-every-callbackfn-thisArg" class="headerlink" title="Array.prototype.every ( callbackfn [ , thisArg ] )"></a>Array.prototype.every ( callbackfn [ , thisArg ] )</h6><h6 id="Array-prototype-some-callbackfn-thisArg"><a href="#Array-prototype-some-callbackfn-thisArg" class="headerlink" title="Array.prototype.some ( callbackfn [ , thisArg ] )"></a>Array.prototype.some ( callbackfn [ , thisArg ] )</h6><h6 id="Array-prototype-forEach-callbackfn-thisArg"><a href="#Array-prototype-forEach-callbackfn-thisArg" class="headerlink" title="Array.prototype.forEach ( callbackfn [ , thisArg ] )"></a>Array.prototype.forEach ( callbackfn [ , thisArg ] )</h6><p>callbackfn 应该是个函数，它接受三个参数。forEach 按照索引的升序，对数组里存在的每个元素调用一次 callbackfn。callbackfn 只被实际存在的数组元素调用；它不会被缺少的数组元素调用。</p>
<p>如果提供了一个 thisArg 参数，它会被当作 this 值传给每个 callbackfn 调用。如果没提供它，用 undefined 替代。</p>
<p>调用 callbackfn 时将传入三个参数：元素的值，元素的索引，和遍历的对象。</p>
<p>对 forEach 的调用不直接更改对象，但是对 callbackfn 的调用可能更改对象。</p>
<p>forEach 处理的元素范围是在首次调用 callbackfn 之前设定的。在 forEach 调用开始后追加到数组里的元素们不会被 callbackfn 访问。如果更改以存在数组元素，forEach 访问这些元素时的值会传给 callbackfn；在 forEach 调用开始后删除的和之前被访问过的元素们是不访问的。</p>
<h6 id="Array-prototype-map-callbackfn-thisArg"><a href="#Array-prototype-map-callbackfn-thisArg" class="headerlink" title="Array.prototype.map ( callbackfn [ , thisArg ] )"></a>Array.prototype.map ( callbackfn [ , thisArg ] )</h6><p>callbackfn 应该是个函数，它接受三个参数。map 按照索引的升序，对数组里存在的每个元素调用一次 callbackfn，并用结果构造一个新数组。callbackfn 只被实际存在的数组元素调用；它不会被缺少的数组元素调用。 V8.png</p>
<p>如果提供了一个 thisArg 参数，它会被当作 this 值传给每个 callbackfn 调用。如果没提供它，用 undefined 替代。</p>
<p>调用 callbackfn 时将传入三个参数：元素的值，元素的索引，和遍历的对象。</p>
<p>对 map 的调用不直接更改对象，但是对 callbackfn 的调用可能更改对象。</p>
<p>map 处理的元素范围是在首次调用 callbackfn 之前设定的。在 map 调用开始后追加到数组里的元素们不会被 callbackfn 访问。如果更改以存在数组元素，map 访问这些元素时的值会传给 callbackfn；在 map 调用开始后删除的和之前被访问过的元素们是不访问的。</p>
<h6 id="Array-prototype-filter-callbackfn-thisArg"><a href="#Array-prototype-filter-callbackfn-thisArg" class="headerlink" title="Array.prototype.filter ( callbackfn [ , thisArg ] )"></a>Array.prototype.filter ( callbackfn [ , thisArg ] )</h6><p>callbackfn 应该是个函数，它接受三个参数并返回一个可转换为布尔值 true 和 false 的值。filter 按照索引的升序，对数组里存在的每个元素调用一次 callbackfn，并用使 callbackfn 返回 true 的所有值构造一个新数组。callbackfn 只被实际存在的数组元素调用；它不会被缺少的数组元素调用。</p>
<p>如果提供了一个 thisArg 参数，它会被当作 this 值传给每个 callbackfn 调用。如果没提供它，用 undefined 替代。</p>
<p>调用 callbackfn 时将传入三个参数：元素的值，元素的索引，和遍历的对象。</p>
<p>对 filter 的调用不直接更改对象，但是对 callbackfn 的调用可能更改对象。</p>
<p>filter 处理的元素范围是在首次调用 callbackfn 之前设定的。在 filter 调用开始后追加到数组里的元素们不会被 callbackfn 访问。如果更改以存在数组元素，filter 访问这些元素时的值会传给 callbackfn；在 filter 调用开始后删除的和之前被访问过的元素们是不访问的。</p>
<h6 id="Array-prototype-reduce-callbackfn-initialValue"><a href="#Array-prototype-reduce-callbackfn-initialValue" class="headerlink" title="Array.prototype.reduce ( callbackfn [ , initialValue ] )"></a>Array.prototype.reduce ( callbackfn [ , initialValue ] )</h6><p>callbackfn 应该是个函数，它需要四个参数。reduce 按照索引的升序，对数组里存在的每个元素，将 callbackfn 作为回调函数调用一次。</p>
<p>调用 callbackfn 时将传入四个参数：previousValue（initialValue 的值或上次调用 callbackfn 的返回值）、currentValue（当前元素值）、currentIndex 和遍历的对象。第一次调用回调函数时，previousValue 和 currentValue 的取值可以是下面两种情况之一。如果为 reduce 调用提供了一个 initialValue，则 previousValue 将等于 initialValue 并且 currentValue 将等于数组的首个元素值。如果没提供 initialValue，则 previousValue 将等于数组的首个元素值并且 currentValue 将等于数组的第二个元素值。如果数组里没有元素并且没有提供 initialValue，则抛出一个 TypeError 异常。</p>
<p>对 reduce 的调用不直接更改对象，但是对 callbackfn 的调用可能更改对象。</p>
<p>reduce 处理的元素范围是在首次调用 callbackfn 之前设定的。在 reduce 调用开始后追加到数组里的元素们不会被 callbackfn 访问。如果更改以存在数组元素，reduce 访问这些元素时的值会传给 callbackfn；在 reduce 调用开始后删除的和之前被访问过的元素们是不访问的。</p>
<h6 id="Array-prototype-reduceRight-callbackfn-initialValue"><a href="#Array-prototype-reduceRight-callbackfn-initialValue" class="headerlink" title="Array.prototype.reduceRight ( callbackfn [ , initialValue ] )"></a>Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h6><h4 id="String"><a href="#String" class="headerlink" title="String ( . . . )"></a>String ( . . . )</h4><h5 id="String-构造器的属性"><a href="#String-构造器的属性" class="headerlink" title="String 构造器的属性"></a>String 构造器的属性</h5><h6 id="String-prototype"><a href="#String-prototype" class="headerlink" title="String.prototype"></a>String.prototype</h6><p>String.prototype 的初始值是标准的内置 String 原型对象。</p>
<h6 id="String-fromCharCode-char0-char1-…"><a href="#String-fromCharCode-char0-char1-…" class="headerlink" title="String.fromCharCode ( [ char0 [ , char1 [ , … ] ] ] )"></a>String.fromCharCode ( [ char0 [ , char1 [ , … ] ] ] )</h6><p>返回一个字符串值，包含的字符数与参数数目相同。每个参数指定返回字符串中的一个字符，也就是说第一个参数第一个字符，以此类推（从左到右）。一个参数转换为一个字符，通过先应用 ToUint16 操作，再将返回的16位整数看作字符的代码单元值。如果没提供参数，返回空字符串。</p>
<h5 id="字符串原型对象的属性"><a href="#字符串原型对象的属性" class="headerlink" title="字符串原型对象的属性"></a>字符串原型对象的属性</h5><h6 id="String-prototype-charCodeAt-pos"><a href="#String-prototype-charCodeAt-pos" class="headerlink" title="String.prototype.charCodeAt (pos)"></a>String.prototype.charCodeAt (pos)</h6><p>将 this 对象转换为一个字符串，返回一个代表这个字符串 pos 位置字符的代码单元值的数字（小于 216 的非负整数）。如果那个位置没有字符，返回 NaN。</p>
<h6 id="String-prototype-localeCompare-that"><a href="#String-prototype-localeCompare-that" class="headerlink" title="String.prototype.localeCompare (that)"></a>String.prototype.localeCompare (that)</h6><p>当以一个参数 that 来调用 localeCompare 方法，它返回一个非 NaN 数字值，这个数字值反应了对 this 值（转换为字符串）和 that 值（转换为字符串）进行语言环境敏感的字符串比较的结果。两个字符串 S 和 That 用实现定义的一种方式进行比较。比较结果是按照系统默认语言环境指定的顺序来排列字符串。根据这三种情况：S 在 That 前面、两字符串相同、S 在 That 后面，分别返回：负数、零、正数。</p>
<h6 id="String-prototype-search-regexp"><a href="#String-prototype-search-regexp" class="headerlink" title="String.prototype.search (regexp)"></a>String.prototype.search (regexp)</h6><h6 id="String-prototype-trim"><a href="#String-prototype-trim" class="headerlink" title="String.prototype.trim ( )"></a>String.prototype.trim ( )</h6><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean ( . . . )"></a>Boolean ( . . . )</h4><h4 id="Number"><a href="#Number" class="headerlink" title="Number ( . . . )"></a>Number ( . . . )</h4><h5 id="Number-构造器的属性"><a href="#Number-构造器的属性" class="headerlink" title="Number 构造器的属性"></a>Number 构造器的属性</h5><h6 id="Number-MAX-VALUE"><a href="#Number-MAX-VALUE" class="headerlink" title="Number.MAX_VALUE"></a>Number.MAX_VALUE</h6><p>Number.MAX_VALUE 的值是 Number 类型的最大正有限值，约为 1.7976931348623157×10308。</p>
<h6 id="Number-MIN-VALUE"><a href="#Number-MIN-VALUE" class="headerlink" title="Number.MIN_VALUE"></a>Number.MIN_VALUE</h6><p>Number.MIN_VALUE 的值是 Number 类型的最小正有限值，约为 5×10-324。</p>
<h6 id="Number-NEGATIVE-INFINITY"><a href="#Number-NEGATIVE-INFINITY" class="headerlink" title="Number.NEGATIVE_INFINITY"></a>Number.NEGATIVE_INFINITY</h6><h6 id="Number-POSITIVE-INFINITY"><a href="#Number-POSITIVE-INFINITY" class="headerlink" title="Number.POSITIVE_INFINITY"></a>Number.POSITIVE_INFINITY</h6><h5 id="Number-原型对象的属性"><a href="#Number-原型对象的属性" class="headerlink" title="Number 原型对象的属性"></a>Number 原型对象的属性</h5><h6 id="Number-prototype-toFixed-fractionDigits"><a href="#Number-prototype-toFixed-fractionDigits" class="headerlink" title="Number.prototype.toFixed (fractionDigits)"></a>Number.prototype.toFixed (fractionDigits)</h6><p>返回一个包含了 代表 this Number 值的留有小数点后 fractionDigits 个数字的十进制固定小数点记法 的字符串。如果 fractionDigits 是 undefined，就认为是 0。</p>
<h6 id="Number-prototype-toExponential-fractionDigits"><a href="#Number-prototype-toExponential-fractionDigits" class="headerlink" title="Number.prototype.toExponential (fractionDigits)"></a>Number.prototype.toExponential (fractionDigits)</h6><p>返回一个代表 this Number 值 的科学计数法的字符串，它的有效数字的小数点前有一个数字，有效数字的小数点后有 fractionDigits 个数字。如果 fractionDigits 是 undefined，包括指定唯一 Number 值需要的尽可能多的有效数字（就像 ToString，但在这里总是以科学计数法输出）。</p>
<h6 id="Number-prototype-toPrecision-precision"><a href="#Number-prototype-toPrecision-precision" class="headerlink" title="Number.prototype.toPrecision (precision)"></a>Number.prototype.toPrecision (precision)</h6><p>返回一个字符串，它代表 this Number 值 的科学计数法（有效数字的小数点前有一个数字，有效数字的小数点后有 precision - 1 个数字）或十进制固定计数法（precision 个有效数字）。如果 precision 是 undefined，用 ToString 调用代替。</p>
<h4 id="Date"><a href="#Date" class="headerlink" title="Date ( . . . )"></a>Date ( . . . )</h4><h4 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp ( . . . )"></a>RegExp ( . . . )</h4><h4 id="Error"><a href="#Error" class="headerlink" title="Error ( . . . )"></a>Error ( . . . )</h4><h4 id="EvalError"><a href="#EvalError" class="headerlink" title="EvalError ( . . . )"></a>EvalError ( . . . )</h4><h4 id="RangeError"><a href="#RangeError" class="headerlink" title="RangeError ( . . . )"></a>RangeError ( . . . )</h4><h4 id="ReferenceError"><a href="#ReferenceError" class="headerlink" title="ReferenceError ( . . . )"></a>ReferenceError ( . . . )</h4><h4 id="SyntaxError"><a href="#SyntaxError" class="headerlink" title="SyntaxError ( . . . )"></a>SyntaxError ( . . . )</h4><h4 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError ( . . . )"></a>TypeError ( . . . )</h4><h4 id="URIError"><a href="#URIError" class="headerlink" title="URIError ( . . . )"></a>URIError ( . . . )</h4><h3 id="全局对象的其他属性"><a href="#全局对象的其他属性" class="headerlink" title="全局对象的其他属性"></a>全局对象的其他属性</h3><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下文摘自&lt;a href=&quot;https://www.w3.org/html/ig/zh/wiki/ES5/builtins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES5/标准 ECMAScript 内置对象&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;全局对象&quot;
    
    </summary>
    
    
      <category term="ES5" scheme="https://willbean.github.io/tags/ES5/"/>
    
      <category term="Specification" scheme="https://willbean.github.io/tags/Specification/"/>
    
  </entry>
  
  <entry>
    <title>ES5规范回顾系列(一)——术语定义</title>
    <link href="https://willbean.github.io/2017/07/02/es5-review-1/"/>
    <id>https://willbean.github.io/2017/07/02/es5-review-1/</id>
    <published>2017-07-02T06:01:58.000Z</published>
    <updated>2017-07-02T06:35:02.171Z</updated>
    
    <content type="html"><![CDATA[<p>接触前端也有几个年头了，却发现自己从来没有好好的看看ECMAScript规范，闲来无事，就从ECMAScript2015看起吧~摘录部分内容到自己的博客，以备忘~</p>
<p>英文原版在<a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="external">这</a></p>
<p>中文版在<a href="https://www.w3.org/html/ig/zh/wiki/ES5" target="_blank" rel="external">这</a></p>
<p>下文摘自<a href="https://www.w3.org/html/ig/zh/wiki/ES5/overview" target="_blank" rel="external">ES5/概述</a></p>
<h3 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h3><p>在本规范的 <a href="https://www.w3.org/html/ig/zh/wiki/ES5/types" target="_blank" rel="external">第8章</a> 定义的 Undefined、Null、Boolean、Number、String 类型之一的成员。<br>*注： 原始值可以直接表示语言实现的最底层数据。</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象类型的成员。<br>*注： 对象是属性的集合，并有一个原型对象。原型可以是空值。</p>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>创建和初始化对象的函数对象。<br>*注： 构造器的“prototype”属性值是一个原型对象，它用来实现继承和共享属性。</p>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>为其他对象提供共享属性的对象。<br>*注： 当构造器创建一个对象时，为了解决对象的属性引用，该对象会隐式引用构造器的“prototype”属性。通过程序表达式 constructor.prototype 可以引用到构造器的“prototype”属性。并且，添加到对象原型里的属性会通过继承的方式与所有共享此原型的对象共享。另外，可使用 Object.create 内置函数，通过明确指定原型来创建一个新对象。</p>
<h3 id="原生对象"><a href="#原生对象" class="headerlink" title="原生对象"></a>原生对象</h3><p>ECMAScript 实现中完全由本规范定义其语义而不掺入任何宿主环境定义的对象。<br>*注： 标准的原生对象由本规范定义。一些原生对象是内置的，其他的可在 ECMAScript 程序执行过程中构建。</p>
<h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>由 ECMAScript 实现提供，独立于宿主环境的对象，ECMAScript 程序开始执行时就存在。<br>*注： 标准的内置对象由本规范定义，ECMAScript 实现可以指定和定义其他的。所有内置对象都是原生对象。内置构造器是个内置对象，同时也是个构造器。</p>
<h3 id="宿主对象"><a href="#宿主对象" class="headerlink" title="宿主对象"></a>宿主对象</h3><p> 由宿主环境提供的对象，用于完善 ECMAScript 执行环境。<br> *注： 任何不是原生对象的对象就是宿主对象。</p>
<hr>
<h3 id="String-值"><a href="#String-值" class="headerlink" title="String 值"></a>String 值</h3><p>原始值，它是零个或多个16位无符号整数组成的有限有序序列。<br>*注： String 值是 String 类型的成员。通常序列中的每个整数值代表 UTF-16 文本的单个16位单元。然而，对于其值，ECMAScript 只要求必须是16位无符号整数，除此之外没有任何限制或要求。</p>
<h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><p>所有可能的 String 值的集合。</p>
<h3 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h3><p>Object 类型的成员，它是标准内置构造器 String 的实例。<br>*注： 通过使用 new 表达式，以一个 String 值为参数调用 String 构造器来创建 String 对象。由此产生的对象包含一个值为此 String 值的内部属性。将 String 构造器作为一个函数来调用，可将一个 String 对象强制转换为一个 String 值（15.5.1）。</p>
<h3 id="Number-值"><a href="#Number-值" class="headerlink" title="Number 值"></a>Number 值</h3><p>原始值，对应一个64位双精度二进制 IEEE754 值。<br>*注： Number 值是 Number 类型的成员，是一个数字的明确表示法</p>
<h3 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h3><p>所有可能的数字值的集合，包括特殊的“Not-a-Number”(NaN) 值、正无穷、负无穷。</p>
<h3 id="Number-对象"><a href="#Number-对象" class="headerlink" title="Number 对象"></a>Number 对象</h3><p>对象类型的成员，它是标准内置构造器 Number 的一个实例。<br>*注： 通过使用 new 表达式，以一个数字值为参数调用 Number 构造器来创建数字对象。由此产生的对象包含一个值为此数字值的内部属性。将 Number 构造器作为一个函数来调用，可将一个 Number 对象强制转换为一个数字值（15.7.1）。</p>
<h3 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h3><p>正无穷 Number 值。Note.png</p>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p>值为 IEEE 754“Not-a-Number”的 Number 值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触前端也有几个年头了，却发现自己从来没有好好的看看ECMAScript规范，闲来无事，就从ECMAScript2015看起吧~摘录部分内容到自己的博客，以备忘~&lt;/p&gt;
&lt;p&gt;英文原版在&lt;a href=&quot;http://www.ecma-international.org/
    
    </summary>
    
    
      <category term="ES5" scheme="https://willbean.github.io/tags/ES5/"/>
    
      <category term="Specification" scheme="https://willbean.github.io/tags/Specification/"/>
    
  </entry>
  
  <entry>
    <title>React Native实战总结</title>
    <link href="https://willbean.github.io/2017/06/24/react-native-summary/"/>
    <id>https://willbean.github.io/2017/06/24/react-native-summary/</id>
    <published>2017-06-24T08:18:31.000Z</published>
    <updated>2017-07-01T07:51:35.934Z</updated>
    
    <content type="html"><![CDATA[<p>入职有道数月，主要参与了精品课垂直页的改版，期间遇到了不少坑，虽然还未正式上线，但是也值得总结一波，故写下此文。</p>
<h3 id="需求介绍"><a href="#需求介绍" class="headerlink" title="需求介绍"></a>需求介绍</h3><ul>
<li>首页部分：加入日志控制工具以收集、统计用户操作；改写搜索框写法，将搜索框提取成独立的共用组件。</li>
<li>垂直页部分：此次改版集中在垂直页，新版垂直页将导航部分改版加入搜索框；重新设计了Banner部分；课程分类重新设计；课程入口信息增多样式改变；将原本的两列布局改成新版的一列布局，还加入了原本没有的（图片）小标题。</li>
</ul>
<h3 id="实现方案及问题"><a href="#实现方案及问题" class="headerlink" title="实现方案及问题"></a>实现方案及问题</h3><h4 id="一、日志控制"><a href="#一、日志控制" class="headerlink" title="一、日志控制"></a>一、日志控制</h4><h5 id="首页布局"><a href="#首页布局" class="headerlink" title="首页布局"></a>首页布局</h5><div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/home1.jpg" width="50%"><br></div>

<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/home2.jpg" width="50%"><br></div>

<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/home3.jpg" width="50%"><br></div>

<h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>日志控制要求在Banner、课程分类列表、公开课列表、猜你喜欢、精选课程等模块出现在屏幕时发送一条日志，滑出屏幕再滑入也应该重新发送，其中Banner、课程分类列表和公开课列表是可以横向滑动的，滑动时要发送展示部分的日志，每个部分来回滚动也仅发送一次。</p>
<p>因为要获取各个部分的offsetTop和height，所以目前使用的方案是使用EventEmitter，在各组件onLayout的时候将组件的offsetTop和height发送给日志管理(LogControl)组件，为了方便使用，组件使用了<a href="http://www.cnblogs.com/TomXu/archive/2012/02/20/2352817.html" target="_blank" rel="external">单例模式</a>,并继承了EventEmitter，在需要发送日志的组件下引入LogControl实例来传递信息，在Home组件的滚动事件下监听各组件的状态，如进入屏幕则发送日志。</p>
<h5 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Events <span class="keyword">from</span> <span class="string">'event-emitter'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">LogControl</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 判断是否存在实例</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> LogControl.instance === <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> LogControl.instance;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">this</span>._listObject = &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>._offsetTopList = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 缓存</span></div><div class="line">    LogControl.instance = <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line">LogControl.prototype = <span class="keyword">new</span> Events()</div><div class="line">LogControl.prototype.constructor = LogControl;</div></pre></td></tr></table></figure>
<h5 id="遇到问题及解决方案"><a href="#遇到问题及解决方案" class="headerlink" title="遇到问题及解决方案"></a>遇到问题及解决方案</h5><ul>
<li>安卓在组件滑动时会重复调用onLayout事件，导致日志重复发送。<br><br>解决方案：在组件内增加一个属性判断是否触发过onLayout事件，是则不再调用。</li>
<li>安卓在初次进入首页加载完成后不会自动滚动，而IOS下会有滚动效果，导致安卓下只有在滑动了屏幕之后才会发送日志。<br><br>解决方案一：安卓在加载完毕后手动调用scrollTo方法去触发一次onScroll事件。(未采用)<br><br>解决方案二：在Home组件componentDidUpdate中调用一次LogControl中的方法去发送日志。</li>
</ul>
<h4 id="二、搜索框提取"><a href="#二、搜索框提取" class="headerlink" title="二、搜索框提取"></a>二、搜索框提取</h4><h5 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h5><p>因为垂直页改版后需要使用到搜索框，故将原本只是用于首页的搜索框组件提取为公用组件，将相关样式改为了可配置的形式，由父组件通过参数传入，因为首页和垂直页的搜索页一致，所以保留了其样式，日后如有需要再进行修改。</p>
<h5 id="相关代码-1"><a href="#相关代码-1" class="headerlink" title="相关代码"></a>相关代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;Search</div><div class="line">  isYoudaoCourseApp=&#123;<span class="keyword">this</span>.state.isYoudaoCourseApp&#125;</div><div class="line">  <span class="comment">// setScrollViewEnableFunc=&#123;this.setScrollViewEnableFunc&#125;</span></div><div class="line">  hasSearchBg=&#123;<span class="keyword">this</span>.state.hasSearchBg&#125;</div><div class="line">  setBarStyleFunc=&#123;<span class="keyword">this</span>.setBarStyleFunc&#125;</div><div class="line">  fadeAnim=&#123;<span class="keyword">this</span>.state.fadeAnim&#125;</div><div class="line"></div><div class="line">  searchContainerStyle=&#123;searchStyle.containerSearch&#125;</div><div class="line">  searchOuterHideBarStyle=&#123;searchStyle.outerHideBar&#125;</div><div class="line">  searchOuterStyle=&#123;searchStyle.outer&#125;</div><div class="line">  searchOuterBgStyle=&#123;searchStyle.outerBg&#125;</div><div class="line">  searchPlaceHolderStyle=&#123;searchStyle.searchPlaceHolder&#125;</div><div class="line">  searchInputContainerStyle=&#123;searchStyle.searchInputCon&#125;</div><div class="line">  searchInputStyle=&#123;[searchStyle.searchInput, &#123;<span class="attr">backgroundColor</span>: <span class="keyword">this</span>.state.hasSearchBg ? <span class="string">'rgba(233,233,233,.8)'</span> : <span class="string">'rgba(255,255,255,.8)'</span>&#125;]&#125;</div><div class="line">  searchIconStyle=&#123;searchStyle.icSearch&#125;</div><div class="line"> /&gt;</div></pre></td></tr></table></figure>
<h4 id="三、导航栏"><a href="#三、导航栏" class="headerlink" title="三、导航栏"></a>三、导航栏</h4><h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/vertical3.jpg" width="50%"><br><span>旧版</span><br></div>

<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/vertical1.jpg" width="50%"><br><span>新版</span><br></div>

<h5 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h5><p>不同于旧版，新版导航去掉了原来的滚动条，改为了垂直标题+搜索框的形式。</p>
<h5 id="遇到问题及解决方案-1"><a href="#遇到问题及解决方案-1" class="headerlink" title="遇到问题及解决方案"></a>遇到问题及解决方案</h5><ul>
<li>React native的元素堆叠顺序无法通过zIndex，所以如果将导航组件写在最前面的话，搜索页会被下面的ScrollView遮盖。<br><br>解决方案：将搜索框改为绝对定位并置于文档最后。</li>
<li>导航标题字数不一，如果搜索框宽度固定，可能会与标题重叠。<br><br>解决方案：在原有导航位置放置一个仅有背景色和高度的View组件，将标题和搜索框作为一个整体放置在文档最下面，然后通过绝对定位覆盖在View组件上层，此时搜索框就可以设置为自适应宽度了。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;[styles.container, Platform.OS === <span class="string">'android'</span> &amp;&amp; !isTeacher ? &#123;<span class="attr">marginTop</span>: tag.get(<span class="string">'hideStatusBar'</span>) ? statusBarHeight : <span class="number">0</span>&#125; : &#123;<span class="attr">marginTop</span>: <span class="number">0</span>&#125;]&#125;&gt;</div><div class="line">  &#123;isTeacher ? <span class="literal">null</span> : &lt;View style=&#123;styles.headNav&#125;/&gt;&#125; // 这个&lt;View&gt;仅用于占位</div><div class="line">  &lt;ScrollView&gt;</div><div class="line">  ...</div><div class="line">  &lt;/ScrollView&gt;</div><div class="line">  &#123;this._renderFixedNav(tag, this.state.isYoudaoCourseApp)&#125; // 真正的导航栏</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<h4 id="四、Banner"><a href="#四、Banner" class="headerlink" title="四、Banner"></a>四、Banner</h4><h5 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h5><p>如上图，新版Banner每个图片并不占据整个屏宽，两边露出上下两张图片的一小部分，以做WEB的滑动组件的经验来说，要实现这样的功能，无非也就是通过绝对定位设置滚动栏，滚动时通过改变left或者translate来改变位置，如下图：</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/prototype.png" width="95%"><br></div>

<p>类推到这里，想要实现新版的效果，只需要将外层容器宽度设置成对应的数值，在设置overflow:visible即可，如下图：</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/prototype2.png" width="95%"><br></div>

<p>在IOS端，一切正如我所料，相当之顺利，但是拿起安卓机一看，好像不太对劲，并没有出现预期的效果，Google一番得知，安卓不支持overflow属性！？</p>
<p>由于原本使用的是第三方的<a href="https://github.com/leecade/react-native-swiper" target="_blank" rel="external">react-native-swiper组件</a>，出现这种情况赶紧翻看一下源码，看看能不能找到什么解决方案，然后发现在IOS端Swiper使用的是ScrollView，而在Android端使用的是ViewPagerAndroid，找了个安卓的朋友问了问，在原生安卓上使用ViewPager是可以实现这样的效果的(<a href="http://m.blog.csdn.net/hb8676086/article/details/50628429" target="_blank" rel="external">ViewPager实现一个页面多个Item的显示</a>)，然而，ViewPagerAndroid并没有提供诸如clipChildren、layerType的属性，只能寻求别的方案了。</p>
<p>后来决定用Animate自己写一个滑动组件出来，写了个小demo，发现十分卡顿，可能姿势不对吧。</p>
<p>奋斗几天无果，后来在网上看到<a href="https://github.com/race604/react-native-viewpager" target="_blank" rel="external">react-native-viewpager组件</a>，无奈之下下载来看看源码，居然也是用Animate写的，感觉有戏！为了实现设计稿的效果，改了一下源码并拷贝出来作为一个自己的组件来使用。</p>
<p>用这个组件虽然实现了想要的效果，但是性能相较于ViewPagerAndroid确实要低一些，滑动过程中会有些许卡顿，为了不影响IOS端，IOS端还是保留了原来的写法，仅在Android端使用。</p>
<h5 id="相关代码-2"><a href="#相关代码-2" class="headerlink" title="相关代码"></a>相关代码</h5><p>ViewPager组件源码修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> offset = <span class="keyword">this</span>.props.offset; <span class="comment">// 加入offset属性来设置偏移</span></div><div class="line"><span class="comment">// this.childIndex = hasLeft ? 1 : 0;</span></div><div class="line"><span class="comment">// this.state.scrollValue.setValue(this.childIndex);</span></div><div class="line"><span class="keyword">var</span> translateX = <span class="keyword">this</span>.state.scrollValue.interpolate(&#123;</div><div class="line">  <span class="attr">inputRange</span>: [<span class="number">0</span>, <span class="number">1</span>], <span class="attr">outputRange</span>: [offset, -viewWidth + offset] <span class="comment">// 修改了滑动范围</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>ViewPager组件调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ViewPager</div><div class="line">  dataSource=&#123;ds&#125;</div><div class="line">  renderPageIndicator=&#123;<span class="literal">false</span>&#125;</div><div class="line">  isLoop=&#123;ds.pageIdentities.length &gt; <span class="number">1</span>&#125;</div><div class="line">  autoPlay=&#123;<span class="literal">true</span>&#125;</div><div class="line">  offset=&#123;calculatePixel(<span class="number">16</span>)&#125;</div><div class="line">  childWidth=&#123;calculatePixel(<span class="number">328</span>)&#125; <span class="comment">// 定义每个子元素的实际宽度（加入了边距）</span></div><div class="line">  renderPage=&#123;<span class="keyword">this</span>._renderBannerItem.bind(<span class="keyword">this</span>)&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h4 id="五、其他部分"><a href="#五、其他部分" class="headerlink" title="五、其他部分"></a>五、其他部分</h4><h5 id="布局-1"><a href="#布局-1" class="headerlink" title="布局"></a>布局</h5><div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/vertical4.jpg" width="50%"><br></div>

<h5 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h5><p>如上图布局，更新还包括了课程分类的更新、加入了图片标题、课程入口的更新。</p>
<p>这一部分比较简单，似乎没啥好说的。</p>
<h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><h4 id="一、减少过度绘制"><a href="#一、减少过度绘制" class="headerlink" title="一、减少过度绘制"></a>一、减少过度绘制</h4><p>在安卓机的开发者选项中可以开启“调试GPU过度绘制”，如下图：</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/android1.png" width="50%"><br></div>

<p>关于安卓过度绘制的详情可以在<a href="http://blog.csdn.net/moyameizan/article/details/47807327" target="_blank" rel="external">这里</a>查看，简单来说就是界面元素的多重层叠，假设每层元素都有背景，那么对于用户来说，只有最上层的背景才是可以看到的，其它的背景虽然绘制了，但是却没有起到效果，就是过度绘制了。</p>
<p>安卓GPU过度绘制的颜色信息大致如下：</p>
<blockquote>
<ul>
<li>蓝色1x过度绘制</li>
<li>绿色2x过度绘制</li>
<li>淡红色3x过度绘制</li>
<li>红色超过4x过度绘制</li>
</ul>
</blockquote>
<p>颜色越浅表示过度绘制程度越低，原色表示没有过度绘制。</p>
<p>现在来看看自己的APP会呈现出什么效果：</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/android2.png" width="50%"><br><span>首页</span><br></div>

<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/android3.png" width="50%"><br><span>垂直页</span><br></div>

<p>首页和垂直页差距似乎有点大，这里看到垂直页基本满屏大红，导致这个问题的原因不是垂直页充满了大量的背景，而是路由切换并没有把首页隐藏，垂直页相当于一整个元素覆盖在首页上方，所以看到的满屏大红是首页绘制加上垂直页绘制的效果，所以我们似乎找到了一个可以优化的地方：<em>如何在路由切换的时候将首页隐藏或者像原生APP那样切换到一个新的界面？</em></p>
<h4 id="二、bundle拆包"><a href="#二、bundle拆包" class="headerlink" title="二、bundle拆包"></a>二、bundle拆包</h4><p>一般来说，一个简单的RN应用，打包之后的bundle会有500+KB是属于RN的依赖，与业务无关，而我们的APP将安卓打包之后生成的bundle有900+KB，其中绝大部分应该也是来自各种依赖文件，如果能将依赖和业务文件拆分开来，生成一个common.bundle、一个或多个business.bundle，那么我们可以在一定程度上改善用户体验。</p>
<blockquote>
<ul>
<li>减少初始时间（提前运行基础代码）</li>
<li>部分更新</li>
<li>在多个bundle之间共享公共模块</li>
</ul>
</blockquote>
<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/react-native-summary/bundle.png" width="95%"><br></div>

<p>上图引自<a href="https://github.com/facebook/react-native/issues/5399" target="_blank" rel="external">issue/5399</a>，在用户进入应用之前，我们就可以加载并运行common.bundle，并在用户进入应用之后加载指定的业务文件，而不必一次性把所有东西都加载进行，以提升性能。</p>
<p>目前可参考的拆包方案有</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/23715716" target="_blank" rel="external">携程是如何做React Native优化的</a></li>
<li>携程的<a href="https://github.com/ctripcorp/moles-packer" target="_blank" rel="external">moles-packer</a>(携程似乎已经放弃这个方案，改为以unbundle为基础的拆包方案)</li>
<li><a href="https://blog.desmondyao.com/rn-split/" target="_blank" rel="external">【React Native】一个简单的拆分Bundle&amp;资源做法</a></li>
<li><a href="http://coofee.github.io/post/react-native-bundle-split/" target="_blank" rel="external">React Native Bundle Split</a></li>
<li><a href="https://github.com/desmond1121/react-native-split" target="_blank" rel="external">react-native-split</a></li>
</ul>
<h3 id="问题总览"><a href="#问题总览" class="headerlink" title="问题总览"></a>问题总览</h3><ul>
<li>安卓RN不支持overflow属性</li>
<li>安卓ScrollView等组件在滑动的时候会触发自己和其他组件的onLayout事件</li>
<li>安卓line-height属性不支持小数</li>
<li>安卓在背景色过度设置的时候会严重影响性能</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;入职有道数月，主要参与了精品课垂直页的改版，期间遇到了不少坑，虽然还未正式上线，但是也值得总结一波，故写下此文。&lt;/p&gt;
&lt;h3 id=&quot;需求介绍&quot;&gt;&lt;a href=&quot;#需求介绍&quot; class=&quot;headerlink&quot; title=&quot;需求介绍&quot;&gt;&lt;/a&gt;需求介绍&lt;/h3&gt;&lt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://willbean.github.io/tags/Javascript/"/>
    
      <category term="HTML" scheme="https://willbean.github.io/tags/HTML/"/>
    
      <category term="ReactNative" scheme="https://willbean.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>Three.js实现仿IOS live图效果</title>
    <link href="https://willbean.github.io/2017/05/09/live-photo-for-three/"/>
    <id>https://willbean.github.io/2017/05/09/live-photo-for-three/</id>
    <published>2017-05-09T12:57:44.000Z</published>
    <updated>2017-07-09T16:04:46.629Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><p>四月出游浪了一波，拍了一堆live图的照片，于是乎就想做个Web页，把这些照片展示出来，正逢最近学习了一些Three.js，就想着用上着技术做个小玩意出来。上网搜索了一波，苹果官网推出了一个live photos的<a href="https://cdn.apple-livephotoskit.com/lpk/1/livephotoskit.js" target="_blank" rel="external">框架</a>，但是并不适用于canvas，就寻思着模仿着做一个吧~</p>
<h3 id="二、组件设计"><a href="#二、组件设计" class="headerlink" title="二、组件设计"></a>二、组件设计</h3><p>既然是模仿，那就要知道别人是怎么做的。新建了个HTML文件，导入<a href="https://cdn.apple-livephotoskit.com/lpk/1/livephotoskit.js" target="_blank" rel="external">livephotoskit.js</a>，看着API写了个Demo，运行，开启开发者工具，粗略地研究了一下。因为将Live图导入到电脑中，会变为JPG和MOV格式的两个文件，大家都知道，一个是图片资源，一个是视频资源，而调用<a href="https://cdn.apple-livephotoskit.com/lpk/1/livephotoskit.js" target="_blank" rel="external">livephotoskit.js</a>时也需要将着两个文件路径作为参数传入，渲染出来的是一个静态的图片，点击图片上方的按钮，就渐出隐藏图片，显示并播放置于图片后方的视频，当视频播放完毕后再渐入显示图片后隐藏视频。</p>
<p>那么就有大致的实现思路了：将图片和视频重叠放置，必要时显示或隐藏。</p>
<p>在看Three.js 实例的时候，发现了一个视频播放Demo，效果如下图（图片较大，可能加载很久甚至加载不出来）：</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/live-photo-for-three/Animation2.gif" width="95%"><br></div>

<p>就想着将这个效果改一改，给用上。</p>
<p>为了便于复用，就将这个组件以类的形式编写出来吧。</p>
<p>这个类起码要包含以下属性和方法：</p>
<blockquote>
<ol>
<li>options对象，传递组件长宽高、横向纵向块数、动画帧数</li>
<li>init方法，初始化操作，生成图片、视频实例</li>
<li>show方法，显示整个组件</li>
<li>hide方法，隐藏整个组件</li>
<li>play方法，播放视频</li>
<li>pause方法，暂停视频</li>
</ol>
</blockquote>
<h3 id="三、效果展示"><a href="#三、效果展示" class="headerlink" title="三、效果展示"></a>三、效果展示</h3><div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/live-photo-for-three/Animation.gif" width="95%"><br></div>

<p>具体代码就不展示了，源码放在<a href="https://github.com/WillBean/photo-for-three.js" target="_blank" rel="external">github</a>，有兴趣的朋友可以去看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、需求分析&quot;&gt;&lt;a href=&quot;#一、需求分析&quot; class=&quot;headerlink&quot; title=&quot;一、需求分析&quot;&gt;&lt;/a&gt;一、需求分析&lt;/h3&gt;&lt;p&gt;四月出游浪了一波，拍了一堆live图的照片，于是乎就想做个Web页，把这些照片展示出来，正逢最近学习了一些T
    
    </summary>
    
    
      <category term="Three.js" scheme="https://willbean.github.io/tags/Three-js/"/>
    
      <category term="Javascript" scheme="https://willbean.github.io/tags/Javascript/"/>
    
      <category term="HTML" scheme="https://willbean.github.io/tags/HTML/"/>
    
      <category term="Canvas" scheme="https://willbean.github.io/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu云服务器开启telnet实现远程登录</title>
    <link href="https://willbean.github.io/2017/04/02/ubuntu-open-telnet/"/>
    <id>https://willbean.github.io/2017/04/02/ubuntu-open-telnet/</id>
    <published>2017-04-02T06:35:14.000Z</published>
    <updated>2017-07-01T07:49:51.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、安装telnet服务"><a href="#一、安装telnet服务" class="headerlink" title="一、安装telnet服务"></a>一、安装telnet服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install xinetd telnetd</div></pre></td></tr></table></figure>
<h3 id="二、修改-etc-xinetd-conf，在-log-type-SYSLOG-daemon-info下面添加内容"><a href="#二、修改-etc-xinetd-conf，在-log-type-SYSLOG-daemon-info下面添加内容" class="headerlink" title="二、修改/etc/xinetd.conf，在# log_type = SYSLOG daemon info下面添加内容"></a>二、修改/etc/xinetd.conf，在# log_type = SYSLOG daemon info下面添加内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">instances = 60   </div><div class="line">log_type = SYSLOG authpriv   </div><div class="line">log_on_success = HOST PID   </div><div class="line">log_on_failure = HOST   </div><div class="line">cps = 25 30</div></pre></td></tr></table></figure>
<h3 id="三、编辑-etc-xinetd-d-telnet文件（没有可自行创建此文件），添加以下内容"><a href="#三、编辑-etc-xinetd-d-telnet文件（没有可自行创建此文件），添加以下内容" class="headerlink" title="三、编辑/etc/xinetd.d/telnet文件（没有可自行创建此文件），添加以下内容"></a>三、编辑/etc/xinetd.d/telnet文件（没有可自行创建此文件），添加以下内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># default: on   </span></div><div class="line"><span class="comment"># description: The telnet server serves telnet sessions; it uses \   </span></div><div class="line"><span class="comment"># unencrypted username/password pairs for authentication.   </span></div><div class="line">service telnet   </div><div class="line">&#123;   </div><div class="line"><span class="built_in">disable</span> = no   </div><div class="line">flags = REUSE   </div><div class="line">socket_type = stream   </div><div class="line"><span class="built_in">wait</span> = no   </div><div class="line">user = root   </div><div class="line">server = /usr/sbin/in.telnetd   </div><div class="line">log_on_failure += USERID   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、重启机器或网络"><a href="#四、重启机器或网络" class="headerlink" title="四、重启机器或网络"></a>四、重启机器或网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/xinetd restart</div></pre></td></tr></table></figure>
<h3 id="五、通过telnet命令测试是否配置成功"><a href="#五、通过telnet命令测试是否配置成功" class="headerlink" title="五、通过telnet命令测试是否配置成功"></a>五、通过telnet命令测试是否配置成功</h3><h3 id="六、Windows下开启telnet服务"><a href="#六、Windows下开启telnet服务" class="headerlink" title="六、Windows下开启telnet服务"></a>六、Windows下开启telnet服务</h3><h3 id="七、使用CMD连接Linux服务器"><a href="#七、使用CMD连接Linux服务器" class="headerlink" title="七、使用CMD连接Linux服务器"></a>七、使用CMD连接Linux服务器</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、安装telnet服务&quot;&gt;&lt;a href=&quot;#一、安装telnet服务&quot; class=&quot;headerlink&quot; title=&quot;一、安装telnet服务&quot;&gt;&lt;/a&gt;一、安装telnet服务&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
    
    </summary>
    
    
      <category term="Configure" scheme="https://willbean.github.io/tags/Configure/"/>
    
      <category term="Cloud Server" scheme="https://willbean.github.io/tags/Cloud-Server/"/>
    
      <category term="Ubuntu" scheme="https://willbean.github.io/tags/Ubuntu/"/>
    
      <category term="Telnet" scheme="https://willbean.github.io/tags/Telnet/"/>
    
  </entry>
  
  <entry>
    <title>Three.js obj模型转js并渲染</title>
    <link href="https://willbean.github.io/2017/03/23/three.js-object-to-module/"/>
    <id>https://willbean.github.io/2017/03/23/three.js-object-to-module/</id>
    <published>2017-03-23T06:13:46.000Z</published>
    <updated>2017-07-01T06:23:43.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、格式转化"><a href="#一、格式转化" class="headerlink" title="一、格式转化"></a>一、格式转化</h3><ol>
<li>下载python.到python官网<a href="https://www.python.org/" target="_blank" rel="external">https://www.python.org/</a>进行下载，由于我是使用windows，所以直接下载了python3 windows的安装包，一路next完成安装，安装完成再配置一下环境变量即可。</li>
<li>下载three.js提供的格式转换文件——<strong>convert_obj_three.py</strong> （three.js官网可下载，或者到其github直接复制粘贴），注意版本，有python2和python3两个版本，按需下载。</li>
<li>将<strong>convert_obj_three.py</strong> 和你的obj文件放置同一目录，命令行下执行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python convert_obj_three.py -i infile.obj -o outfile.js</div></pre></td></tr></table></figure>
<p>该命令还有其他一些参数，详情可查阅convert_obj_three.py 注释部分。</p>
<h3 id="二、模型渲染"><a href="#二、模型渲染" class="headerlink" title="二、模型渲染"></a>二、模型渲染</h3><p>我使用的是three.js [r84]版本，较之前面版本有些不同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> loader = <span class="keyword">new</span> THREE.JSONLoader();</div><div class="line">loader.load(<span class="string">'./img/port2.js'</span>, (geometry, materials)=&gt; &#123;</div><div class="line">        <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MultiMaterial(materials);</div><div class="line">        <span class="keyword">var</span> object = <span class="keyword">new</span> THREE.Mesh(geometry, material);</div><div class="line">        scene.add(object);</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log((xhr.loaded / xhr.total * <span class="number">100</span>) + <span class="string">'% loaded'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// Function called when download errors</span></div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.error(xhr);</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、格式转化&quot;&gt;&lt;a href=&quot;#一、格式转化&quot; class=&quot;headerlink&quot; title=&quot;一、格式转化&quot;&gt;&lt;/a&gt;一、格式转化&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;下载python.到python官网&lt;a href=&quot;https://www.python.or
    
    </summary>
    
    
      <category term="Three.js" scheme="https://willbean.github.io/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title>长轮询与服务器推送实现不同页面之间的通信</title>
    <link href="https://willbean.github.io/2017/03/09/long-polling-and-server-push/"/>
    <id>https://willbean.github.io/2017/03/09/long-polling-and-server-push/</id>
    <published>2017-03-09T06:42:06.000Z</published>
    <updated>2017-07-01T07:41:16.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>由于经常使用微信登录其他一些博客论坛什么的，就会经常遇到扫一扫登录的情况，大家都知道，我们平时访问的网页一般都是无连接的，也就是说需要数据的时候即便发出请求，服务器接受到请求之后便处理并返回相应的数据，这时连接就已经断开了，而使用扫一扫登陆的情况确是相反的，页面中的二维码一直等待着我们使用手机去扫描它，扫描过后页面完成登陆操作并进行一些跳转，那么问题来了，这是怎么实现的呢？怀着好奇心，先激活出二维码界面，再在浏览器上按下F12，切换到控制台，发现每隔几秒便有一个请求发出，稍微想想也就知道大致是怎么回事了，不就是长轮询嘛，实现的方法也挺多的，可以使用最原始的XMLHttpRequest，也可以使用WebSocket。最近也闲来没事做，就打算自己写个demo好了。</p>
<h3 id="一、架构介绍"><a href="#一、架构介绍" class="headerlink" title="一、架构介绍"></a>一、架构介绍</h3><p>既然是demo，我们也没必要搞太复杂，就用客户端A、服务器B、服务器C、客户端D表示吧。</p>
<p>客户端A模拟触发登录操作，服务器B接收到A的请求，B再告知服务器C要进行操作了，C接收到指令后通过服务器推送告诉客户端D显示确认或取消登录的按钮，当用户点击按钮后，D再向C发送一条请求，告知其用户的操作结果，再从C到B，B到A的顺序一步步返回。在C、D进行通信时，A、B发起的请求处于挂起（等待）状态，如果超时的话，就重新进行链接。</p>
<h3 id="二、技术栈介绍"><a href="#二、技术栈介绍" class="headerlink" title="二、技术栈介绍"></a>二、技术栈介绍</h3><p>服务器用到了node+koa，客户端仅仅使用了Html和js，客户端向服务器发送请求使用了XMLHttpRequest，服务器间通信使用request-promise模块，服务器向客户端推送数据使用EventSource，此demo没有使用WebSocket纯粹是因为从来没有用过EventSource想练练手，谁想踩了大坑，后文分解。</p>
<h3 id="三、代码讲解"><a href="#三、代码讲解" class="headerlink" title="三、代码讲解"></a>三、代码讲解</h3><p>又到了最愉快的贴代码时间~</p>
<p>先展示一下目录结构：</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/long-polling-and-server-push/dir.png" width="50%"><br></div>

<p>1）request client &gt; index.html （客户端A代码）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"send"</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> send = <span class="built_in">document</span>.querySelector(<span class="string">'#send'</span>)</div><div class="line">    send.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        polling(<span class="string">'http://localhost:8888/longPolling'</span>,<span class="number">5000</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">polling</span>(<span class="params">url,timeout</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">        xhr.open(<span class="string">"get"</span>,url)</div><div class="line">        xhr.timeout = timeout;</div><div class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>( xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>)&#123;</div><div class="line">                alert(<span class="string">'对方选择了·确定·'</span>)</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">204</span>)&#123;</div><div class="line">                alert(<span class="string">'对方选择了·取消·'</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        xhr.ontimeout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Timeout resend '</span>+ <span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">            polling(url,<span class="number">5000</span>)</div><div class="line">        &#125;</div><div class="line">        xhr.send()</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一个按钮，绑定了polling函数，传入请求地址与超时时间，超时则重新请求。</p>
<p>2.1）request server &gt; app.js （服务器B代码）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</div><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</div><div class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'koa-cors'</span>);</div><div class="line"><span class="keyword">const</span> routers = <span class="built_in">require</span>(<span class="string">'./routes'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> repPort = <span class="number">8888</span>;</div><div class="line"></div><div class="line">router.use(<span class="string">'/'</span>, routers.routes(), routers.allowedMethods());</div><div class="line"></div><div class="line">app.use(cors());</div><div class="line">app.use(router.routes(), router.allowedMethods());</div><div class="line"></div><div class="line">app.listen(repPort)</div></pre></td></tr></table></figure>
<p>2.2）request server &gt; routes &gt; index.js （服务器B路由）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</div><div class="line"><span class="keyword">const</span> rp = <span class="built_in">require</span>(<span class="string">'request-promise'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> resHostname = <span class="string">'localhost'</span>;</div><div class="line"><span class="keyword">let</span> resPort = <span class="number">8889</span>;</div><div class="line"></div><div class="line">router.get(<span class="string">'longPolling'</span>, <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> options = &#123;</div><div class="line">        <span class="attr">uri</span> : <span class="string">`http://<span class="subst">$&#123;resHostname&#125;</span>:<span class="subst">$&#123;resPort&#125;</span>/btServer`</span>,</div><div class="line">        <span class="attr">method</span> : <span class="string">'post'</span></div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">yield</span> rp(options).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = <span class="built_in">parseInt</span>(data);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Finished'</span>)</div><div class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`error message:<span class="subst">$&#123;err&#125;</span>`</span>)</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure>
<p>接收A发来的请求，使用request-promise向C发送请求，同时挂起处理以等待响应。</p>
<p>3.1）responce server &gt; app.js （服务器C代码）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</div><div class="line"><span class="keyword">const</span> render = <span class="built_in">require</span>(<span class="string">'koa-render'</span>);</div><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</div><div class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">'./routes'</span>);</div><div class="line"><span class="keyword">const</span> convert = <span class="built_in">require</span>(<span class="string">'koa-convert'</span>);</div><div class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)();</div><div class="line"></div><div class="line"><span class="keyword">let</span> port = <span class="number">8889</span>;</div><div class="line"></div><div class="line">router.use(<span class="string">'/'</span>, routes.routes());</div><div class="line"></div><div class="line">app.use(convert(bodyparser));</div><div class="line">app.use(<span class="built_in">require</span>(<span class="string">'koa-static'</span>)(__dirname + <span class="string">'/public'</span>));</div><div class="line">app.use(render());</div><div class="line">app.use(router.routes());</div><div class="line"></div><div class="line">app.listen(port);</div></pre></td></tr></table></figure>
<p>3.2）responce server &gt; routes &gt; index.js （服务器C路由）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</div><div class="line"><span class="keyword">const</span> EL = <span class="built_in">require</span>(<span class="string">'../EventListener'</span>);</div><div class="line"><span class="keyword">const</span> el = <span class="keyword">new</span> EL();</div><div class="line"></div><div class="line">router.post(<span class="string">'btServer'</span>,  <span class="function"><span class="keyword">function</span> *(<span class="params">next</span>) </span>&#123;<span class="comment">// 客户端服务器请求</span></div><div class="line">    <span class="keyword">let</span> resBody = <span class="number">0</span>;</div><div class="line">    el.sendEnsureMsg();</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</div><div class="line">        el.once(<span class="string">'receive'</span>, ()=&gt; &#123;</div><div class="line">            <span class="keyword">if</span> (el.status === <span class="string">'yes'</span>) &#123;</div><div class="line">                resBody = <span class="number">200</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.status === <span class="string">'no'</span>) &#123;</div><div class="line">                resBody = <span class="number">204</span>;</div><div class="line">            &#125;</div><div class="line">            resolve();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">this</span>.body = resBody;</div><div class="line">    <span class="keyword">this</span>.status = <span class="number">200</span>;</div><div class="line">&#125;).get(<span class="string">'ensure'</span>,<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123; <span class="comment">//向客户端推送信息</span></div><div class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">this</span>.set(<span class="string">"content-type"</span>,<span class="string">"text/event-stream"</span>);</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</div><div class="line">        el.once(<span class="string">'ensure'</span>, ()=&gt; &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Has send'</span>);</div><div class="line">            resolve();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    self.body = <span class="string">'data: ensure\n\n'</span>;</div><div class="line">    <span class="keyword">this</span>.status = <span class="number">200</span>;</div><div class="line">&#125;).post(<span class="string">'sure'</span>, <span class="function"><span class="keyword">function</span>*(<span class="params">next</span>) </span>&#123; <span class="comment">//客户端相应推送</span></div><div class="line">    el.receiveEnsureMsg(<span class="keyword">this</span>.request.body.data)</div><div class="line">    <span class="keyword">this</span>.status = <span class="number">200</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure>
<p>3.3 的代码继承了events模块，封装了两个方法，一个用来触发服务器推送，一个用来响应客户端D返回的数据。</p>
<p>3.2 中订阅事件使用了该事件监听类并使用了once方法，以防止超时重传时重复订阅此事件。</p>
<p>在调试过程中D一直无法接收到C推送的数据，迟迟查不出原因，最后多方百度才发现，原来EventSource的数据必须以“data: something \n\n”的格式传输，我真是<em>了</em>了。</p>
<p>4）responce server &gt; public &gt;index.html (客户端D代码）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"yes"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"no"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> yes = <span class="built_in">document</span>.querySelector(<span class="string">"#yes"</span>)</div><div class="line">    <span class="keyword">var</span> no = <span class="built_in">document</span>.querySelector(<span class="string">"#no"</span>)</div><div class="line">    <span class="keyword">var</span> container = <span class="built_in">document</span>.querySelector(<span class="string">"#container"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> eventSource = <span class="keyword">new</span> EventSource(<span class="string">'/ensure'</span>)</div><div class="line">    eventSource.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(e.data === <span class="string">'ensure'</span>)&#123;</div><div class="line">            container.style.display = <span class="string">'block'</span></div><div class="line">            eventSource.close()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    eventSource.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`EventSource error:`</span>);</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    yes.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        postMsg(<span class="string">'data=yes'</span>)</div><div class="line">    &#125;</div><div class="line">    no.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        postMsg(<span class="string">'data=no'</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">postMsg</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">        xhr.open(<span class="string">'post'</span>,<span class="string">'/sure'</span>)</div><div class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>)&#123;</div><div class="line">                container.style.display = <span class="string">'none'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">        xhr.send(msg)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>客户端D的代码没有独立开来而放在了response server文件夹下是因为EventSource要求与请求的服务器同源，就直接给它放在了静态资源下。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>好了，代码贴完了，其实并没有什么含金量，就是坑特多。</p>
<p>就这样吧，代码放github了。</p>
<p>传送门：<a href="https://github.com/WillBean/long-polling.git" target="_blank" rel="external">https://github.com/WillBean/long-polling.git</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;由于经常使用微信登录其他一些博客论坛什么的，就会经常遇到扫一扫登录的情况，大家都知道，我们平时访问的网页一般都是无连接的，也就是说需
    
    </summary>
    
    
      <category term="Javascript" scheme="https://willbean.github.io/tags/Javascript/"/>
    
      <category term="HTML" scheme="https://willbean.github.io/tags/HTML/"/>
    
      <category term="长轮询" scheme="https://willbean.github.io/tags/%E9%95%BF%E8%BD%AE%E8%AF%A2/"/>
    
      <category term="服务器推送" scheme="https://willbean.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Node爬虫爬取网页静态资源</title>
    <link href="https://willbean.github.io/2016/12/11/node-crawler/"/>
    <id>https://willbean.github.io/2016/12/11/node-crawler/</id>
    <published>2016-12-11T06:30:50.000Z</published>
    <updated>2017-07-01T07:44:59.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><ol>
<li>首先当然是安装node，这一步忽略。</li>
<li>然后是各种模块，本实例用到了http、fs、url、cheerio、request、async、phantom，前三个是node自带的，无需install。</li>
<li>因为要服务器渲染，所以要用到phantomjs，这个需要自行安装一下，最后再配置一下全局环境。</li>
</ol>
<h3 id="二、模块解释"><a href="#二、模块解释" class="headerlink" title="二、模块解释"></a>二、模块解释</h3><ol>
<li>cheerio模块用于解析DOM树，进行DOM操作， 具体用法跟JQuery类似，对熟悉JQ的人来说，学会使用也就是几分钟的事。</li>
<li>request模块，http模块的高级封装版，便于操作。</li>
<li>async模块，解决“恶魔金字塔”问题。</li>
<li>phantom模块，在服务器端渲染整个界面，为的是能够爬取到页面上一些通过js等动态加载的内容。</li>
</ol>
<h3 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h3><h4 id="1-公用接口"><a href="#1-公用接口" class="headerlink" title="1. 公用接口"></a>1. 公用接口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">exports.Strategy = &#123;<span class="comment">//js,css,images等文件的保存策略</span></div><div class="line"> <span class="string">"SAVE_IN_ROOT"</span>: <span class="number">1</span>,<span class="comment">//保存在根目录下</span></div><div class="line"> <span class="string">"SAVE_IN_SUB_DIR"</span>: <span class="number">2</span><span class="comment">//保存在各级子目录下</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">exports.uniqueArray = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;<span class="comment">//数组去重</span></div><div class="line"> <span class="keyword">var</span> hash = &#123;&#125;,</div><div class="line">     len = arr.length,</div><div class="line">     result = [];</div><div class="line"></div><div class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">     <span class="keyword">if</span> (!hash[arr[i]])&#123;</div><div class="line">         hash[arr[i]] = <span class="literal">true</span>;</div><div class="line">         result.push(arr[i]);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exports.timer = <span class="function"><span class="keyword">function</span> (<span class="params">date,msg</span>) </span>&#123;<span class="comment">//简易版计时器</span></div><div class="line"> <span class="built_in">console</span>.log(msg + <span class="string">" : "</span>+(<span class="keyword">new</span> <span class="built_in">Date</span>() - date) +<span class="string">"ms"</span> );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line"> <span class="attr">url</span>: <span class="string">"http://localhost:8081/dhay/"</span>,<span class="comment">//目的网站</span></div><div class="line"> savePath: <span class="string">"J:/nodejs/open-source-spider"</span>,<span class="comment">//保存路径</span></div><div class="line"> containOutLink: <span class="literal">false</span>, <span class="comment">//是否爬取外部链接</span></div><div class="line"> totalNum: <span class="number">10</span>, <span class="comment">//爬取页面上限，0为不限制</span></div><div class="line"> endWith: <span class="string">"html"</span>,<span class="comment">//文件结尾</span></div><div class="line"> saveStrategy: publicAPI.Strategy.SAVE_IN_ROOT,</div><div class="line"> <span class="attr">getOuterJs</span>: <span class="literal">false</span>,<span class="comment">//是否爬取远端js</span></div><div class="line"> getOuterCss: <span class="literal">false</span>,<span class="comment">//是否爬取远端Css</span></div><div class="line"> getOuterImages: <span class="literal">false</span><span class="comment">//是否爬取远端图片</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>为了简化操作，判断是否为外部资源的方式简化为判断URL是否以http或https为开头，虽然不够严谨，但是能保证爬取下来的网页能根据URL获取到资源。</p>
<p> 保存策略目前也只实现了SAVE_IN_ROOT而已，懒~</p>
<h4 id="3-全局变量"><a href="#3-全局变量" class="headerlink" title="3. 全局变量"></a>3. 全局变量</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> list = [config.url]; <span class="comment">//所要爬取的网页链接队列</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>; <span class="comment">//当前爬取的网页数</span></div><div class="line"><span class="keyword">var</span> date = <span class="literal">null</span>; </div><div class="line"><span class="keyword">var</span> urlInfo = url.parse(config.url); <span class="comment">//入口链接信息</span></div></pre></td></tr></table></figure>
<h4 id="4-获取服务器渲染之后的页面"><a href="#4-获取服务器渲染之后的页面" class="headerlink" title="4. 获取服务器渲染之后的页面"></a>4. 获取服务器渲染之后的页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">phantom.create().then(<span class="function"><span class="keyword">function</span> (<span class="params">ph</span>) </span>&#123;</div><div class="line">     ph.createPage().then(<span class="function"><span class="keyword">function</span> (<span class="params">page</span>) </span>&#123;</div><div class="line">         page.open(url).then(<span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;    </div><div class="line">             <span class="keyword">if</span> (status == <span class="string">'success'</span>) &#123;</div><div class="line">                 page.property(<span class="string">'content'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</div><div class="line">                     <span class="built_in">console</span>.log(html);</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;)</div><div class="line">     &#125;);</div></pre></td></tr></table></figure>
<h4 id="5-解析DOM树"><a href="#5-解析DOM树" class="headerlink" title="5. 解析DOM树"></a>5. 解析DOM树</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = cheerio.load(html);</div><div class="line"><span class="keyword">var</span> js, css , images;</div><div class="line"><span class="comment">//获取js列表</span></div><div class="line"><span class="keyword">var</span> scripts = $(<span class="string">"script"</span>);</div><div class="line">js = getJs(scripts);</div><div class="line"><span class="built_in">console</span>.log(js);</div><div class="line"><span class="comment">//获取css</span></div><div class="line"><span class="keyword">var</span> stylesheets = $(<span class="string">"link[rel='stylesheet']"</span>);</div><div class="line">css = getCss(stylesheets);</div><div class="line"><span class="built_in">console</span>.log(css);</div><div class="line"><span class="comment">//获取图片</span></div><div class="line"><span class="keyword">var</span> imgs = $(<span class="string">"img"</span>);</div><div class="line">images = getImages(imgs);</div><div class="line"><span class="built_in">console</span>.log(images);</div><div class="line"><span class="comment">//获取链接</span></div><div class="line"><span class="keyword">if</span>(!config.totalNum || count &lt; config.totalNum)&#123;</div><div class="line">   <span class="keyword">var</span> links = $(<span class="string">"a"</span>);</div><div class="line">   getLink(links,url);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取页面中所有的js、css和img，分别进行调用函数，返回所要爬取的文件的url数组。</p>
<h4 id="6-getJs-等函数"><a href="#6-getJs-等函数" class="headerlink" title="6. getJs()等函数"></a>6. getJs()等函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJs</span>(<span class="params">scripts</span>) </span>&#123;</div><div class="line"> <span class="keyword">var</span> res = [];</div><div class="line"> scripts.each(<span class="function"><span class="keyword">function</span> (<span class="params">i, script</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> src = script.attribs.src;</div><div class="line">     <span class="keyword">if</span> (!src)</div><div class="line">         <span class="keyword">return</span>;</div><div class="line">     <span class="keyword">if</span> (!config.getOuterJs) &#123;</div><div class="line">         <span class="keyword">if</span> (<span class="regexp">/^https?/</span>.test(src))</div><div class="line">             <span class="keyword">return</span>;</div><div class="line">     &#125;</div><div class="line">     res.push(src);</div><div class="line"> &#125;);</div><div class="line"> <span class="keyword">return</span> publicAPI.uniqueArray(res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getJs()函数，遍历每一个元素，判断其src属性是否存在，不存在则跳过，再根据配置判断是否获取外部文件，满足各条件的加入到res数组中，最后去重后返回结果。</p>
<p> getCss、getImages和getLink方法与上述类似，不同的是getLink多了一些判断和URL格式化操作。</p>
<h4 id="7-保存网页文本"><a href="#7-保存网页文本" class="headerlink" title="7. 保存网页文本"></a>7. 保存网页文本</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> saveHtml = <span class="function"><span class="keyword">function</span> (<span class="params">url, html, callback</span>) </span>&#123;</div><div class="line"> url = url.match(<span class="regexp">/https?:\/\/((?:(?![\?])[\S])*)/</span>)[<span class="number">1</span>];<span class="comment">//截取？以前的字符串</span></div><div class="line"> <span class="keyword">var</span> endWith = <span class="regexp">/\/$/</span>.test(url); <span class="comment">//判断是否以反斜杠结尾</span></div><div class="line"> url = endWith ? url.match(<span class="regexp">/(\S*)\/$/</span>)[<span class="number">1</span>] : url; <span class="comment">//去除反斜杠</span></div><div class="line"> <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\.html|\.htm|\.asp|\.jsp$/</span>); <span class="comment">//判断是否以这些字符串结尾</span></div><div class="line"> <span class="keyword">var</span> usePathAsName = reg.test(url);</div><div class="line"> <span class="keyword">var</span> array = url.split(<span class="string">"/"</span>); <span class="comment">//以反斜杠分割字符串</span></div><div class="line"> array[<span class="number">0</span>] = urlInfo.hostname;</div><div class="line"> <span class="keyword">var</span> length = usePathAsName ? array.length<span class="number">-1</span>: array.length;</div><div class="line"> <span class="keyword">var</span> currentPath = config.savePath;</div><div class="line"></div><div class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123; <span class="comment">//遍历数组，逐层判断当前路径是否存在指定文件夹，不存在则创建</span></div><div class="line">     (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">         currentPath += <span class="string">"/"</span> + array[i];</div><div class="line">         <span class="keyword">if</span> (fs.existsSync(currentPath)) &#123;</div><div class="line">             write(i, callback)</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             <span class="keyword">try</span> &#123;</div><div class="line">                 fs.mkdirSync(currentPath);</div><div class="line">                 write(i, callback)</div><div class="line">             &#125;<span class="keyword">catch</span> (err)&#123;</div><div class="line">                 <span class="built_in">console</span>.log(err);</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;)(i)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">index, callback</span>) </span>&#123; <span class="comment">// 若为最后一个元素，执行写入操作</span></div><div class="line">     <span class="keyword">if</span> (index == length - <span class="number">1</span>) &#123;</div><div class="line">         <span class="keyword">var</span> fileName = endWith ? <span class="string">"index."</span> + config.endWith : usePathAsName ? array[array.length<span class="number">-1</span>] : array[array.length<span class="number">-1</span>] + config.endWith; <span class="comment">//根据情况选择文件名</span></div><div class="line">         fs.writeFile(currentPath + <span class="string">"/"</span> + fileName, html, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">             <span class="keyword">if</span> (err) &#123;</div><div class="line">                 <span class="built_in">console</span>.log(err, <span class="string">"appendFile"</span>);</div><div class="line">             &#125; <span class="keyword">else</span> &#123;</div><div class="line">                 callback();</div><div class="line">             &#125;</div><div class="line">         &#125;);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="8-保存js等资源"><a href="#8-保存js等资源" class="headerlink" title="8. 保存js等资源"></a>8. 保存js等资源</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> saveJs = <span class="function"><span class="keyword">function</span> (<span class="params">url, js, callback ,callback2</span>) </span>&#123;</div><div class="line"> <span class="keyword">if</span>(!js.length)&#123;</div><div class="line">     callback2(<span class="literal">null</span>);</div><div class="line">     <span class="keyword">return</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">var</span> length = js.length;</div><div class="line"> <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"> <span class="keyword">var</span> root = config.savePath + <span class="string">"/"</span> + urlInfo.hostname;</div><div class="line"> <span class="keyword">if</span>(config.saveStrategy == publicAPI.Strategy.SAVE_IN_ROOT)&#123;</div><div class="line">     <span class="keyword">if</span>(fs.existsSync(root))&#123;</div><div class="line">         write(callback,callback2)</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">         fs.mkdirSync(root);</div><div class="line">         write(callback,callback2)</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">callback,callback2</span>) </span>&#123;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</div><div class="line">         (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">             <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^\//</span>);</div><div class="line">             <span class="keyword">var</span> path = reg.test(js[i]) ? js[i].substring(<span class="number">1</span>) : js[i];</div><div class="line">             <span class="keyword">var</span> array = path.split(<span class="string">"/"</span>);</div><div class="line">             <span class="keyword">var</span> currentPath = root;</div><div class="line">             <span class="keyword">var</span> len = array.length;</div><div class="line">             <span class="keyword">for</span>(<span class="keyword">var</span> j =<span class="number">0</span>;j&lt;len<span class="number">-1</span>;j++)&#123; <span class="comment">//创建对应目录</span></div><div class="line">                 (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</div><div class="line">                     currentPath += <span class="string">"/"</span> + array[j];</div><div class="line">                     <span class="keyword">if</span> (fs.existsSync(currentPath)) &#123;</div><div class="line">                         <span class="keyword">if</span>(j == len<span class="number">-2</span>)&#123;</div><div class="line">                             fetch(js[i],<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                                 callback(count, js[i])</div><div class="line">                             &#125;,callback2)</div><div class="line">                         &#125;</div><div class="line">                     &#125; <span class="keyword">else</span> &#123;</div><div class="line">                         <span class="keyword">try</span> &#123;</div><div class="line">                             fs.mkdirSync(currentPath);<span class="built_in">console</span>.log(j,<span class="number">4</span>);</div><div class="line">                             <span class="keyword">if</span>(j == len<span class="number">-2</span>)&#123;</div><div class="line">                                 fetch(js[i],<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                                     callback(count, js[i])</div><div class="line">                                 &#125;,callback2)</div><div class="line">                             &#125;</div><div class="line">                         &#125;<span class="keyword">catch</span> (err)&#123;</div><div class="line">                             <span class="built_in">console</span>.log(<span class="string">"error!"</span>)</div><div class="line">                         &#125;</div><div class="line">                     &#125;</div><div class="line">                 &#125;)(j);</div><div class="line">             &#125;</div><div class="line">         &#125;)(i);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">js,callback,callback2</span>) </span>&#123;</div><div class="line">     request(url+js,<span class="function"><span class="keyword">function</span> (<span class="params">err,res,body</span>) </span>&#123; <span class="comment">//获取资源，再写入</span></div><div class="line">         <span class="comment">//console.log(body);</span></div><div class="line">         js = js.match(<span class="regexp">/((?:(?![\?])[\S])*)/</span>)[<span class="number">1</span>];</div><div class="line">         <span class="keyword">if</span>(err)&#123;</div><div class="line">             count++;</div><div class="line">         &#125;<span class="keyword">else</span>&#123;</div><div class="line">             fs.writeFile(root +<span class="string">"/"</span>+ js,body,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">                 count++;</div><div class="line">                 <span class="keyword">if</span>(count == length)</div><div class="line">                     callback2(<span class="literal">null</span>);</div><div class="line">                 <span class="keyword">if</span>(err)&#123;</div><div class="line">                     <span class="built_in">console</span>.log(err);</div><div class="line">                 &#125;<span class="keyword">else</span>&#123;</div><div class="line">                     callback();</div><div class="line">                 &#125;</div><div class="line">             &#125;);</div><div class="line"></div><div class="line">         &#125;</div><div class="line">     &#125;)</div><div class="line"> &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>保存js等资源的方法比保存网页的更为复杂，主要是因为一个页面可能存在多个js、css等资源，这里有两种保存的策略，一是直接将所有文件保存在根目录下，如根目录如localhost，现有js文件链接为“localhost:8080//abc/js/main/js”，将该js文件保存在localhost/js/下，另一种是保存在对应目录下，即localhost/abc/js/下，但是第二种方法会导致出现很多重复的文件，就没有实现出来。</p>
<p> 获取css、images的方法类似，不做赘述。</p>
<h4 id="9-并行执行写入操作"><a href="#9-并行执行写入操作" class="headerlink" title="9. 并行执行写入操作"></a>9. 并行执行写入操作</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">async</span>.parallel([</div><div class="line"> <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">     saveHtml(url, html, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">"Page:"</span>+(count+<span class="number">1</span>)+<span class="string">"    Url:"</span>+url+<span class="string">"    success!\n"</span>);</div><div class="line">         callback(<span class="literal">null</span>);</div><div class="line">     &#125;);</div><div class="line"> &#125;,</div><div class="line"> <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">     saveJs(url,js, <span class="function"><span class="keyword">function</span> (<span class="params">x, js</span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">"Page:"</span>+(count+<span class="number">1</span>)+<span class="string">"    Js"</span>+(x+<span class="number">1</span>)+<span class="string">"     Src:"</span>+js+<span class="string">"    Success!\n"</span>);</div><div class="line">     &#125;,callback);</div><div class="line"> &#125;,</div><div class="line"> <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">     saveCss(url, css, <span class="function"><span class="keyword">function</span> (<span class="params">x, css</span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">"Page:"</span>+(count+<span class="number">1</span>)+<span class="string">"    Css"</span>+(x+<span class="number">1</span>)+<span class="string">"     Src:"</span>+css+<span class="string">"    Success!\n"</span>);</div><div class="line">     &#125;,callback);</div><div class="line"> &#125;,</div><div class="line"> <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">     saveImage(url, images, <span class="function"><span class="keyword">function</span> (<span class="params">x,img</span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">"Page:"</span>+(count+<span class="number">1</span>)+<span class="string">"    Images"</span>+(x+<span class="number">1</span>)+<span class="string">"     Src:"</span>+img+<span class="string">"    Success!\n"</span>);</div><div class="line">     &#125;,callback);</div><div class="line"> &#125;</div><div class="line">],<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line"> page.close();</div><div class="line"> <span class="keyword">if</span>(err)&#123;</div><div class="line">     <span class="built_in">console</span>.log(err,<span class="string">"ERROR IN PARALLEL PAGE "</span>+(count+<span class="number">1</span>));</div><div class="line"> &#125;<span class="keyword">else</span> &#123;</div><div class="line">     count++;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">"Page:"</span>+(count)+<span class="string">" finished!"</span>);</div><div class="line">     <span class="keyword">var</span> cur = list.shift(),next = list[<span class="number">0</span>];</div><div class="line">     next = <span class="regexp">/^https?:/</span>.test(next) ? next : cur+<span class="string">'/'</span>+next;</div><div class="line">     <span class="keyword">if</span>( count &lt; config.totalNum)</div><div class="line">         requirePage(next);</div><div class="line"> &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>用async模块，并行处理写入操作，当所有写入操作结束后，从list队列获取下一跳地址，循环操作。</p>
<h4 id="10-测试-爬取http-localhost-8081-结果如图："><a href="#10-测试-爬取http-localhost-8081-结果如图：" class="headerlink" title="10. 测试 爬取http://localhost:8081/ 结果如图："></a>10. 测试 爬取<a href="http://localhost:8081/" target="_blank" rel="external">http://localhost:8081/</a> 结果如图：</h4><div align="center"><br><img src="https://raw.githubusercontent.com/WillBean/react-native-summary.github.io/master/images/node-crawler/dir.png" width="50%"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;#一、准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、准备工作&quot;&gt;&lt;/a&gt;一、准备工作&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先当然是安装node，这一步忽略。&lt;/li&gt;
&lt;li&gt;然后是各种模块，本实例用到了http、f
    
    </summary>
    
    
      <category term="Javascript" scheme="https://willbean.github.io/tags/Javascript/"/>
    
      <category term="Crawler" scheme="https://willbean.github.io/tags/Crawler/"/>
    
      <category term="Node" scheme="https://willbean.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云ubuntu服务器配置</title>
    <link href="https://willbean.github.io/2016/11/07/cloud-server-configure/"/>
    <id>https://willbean.github.io/2016/11/07/cloud-server-configure/</id>
    <published>2016-11-07T10:59:23.000Z</published>
    <updated>2017-07-01T07:46:47.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="零、域名绑定"><a href="#零、域名绑定" class="headerlink" title="零、域名绑定"></a>零、域名绑定</h3><p>从腾讯云服务的云解析里解析域名并绑定服务器公网即可。</p>
<h3 id="一、安装mysql"><a href="#一、安装mysql" class="headerlink" title="一、安装mysql"></a>一、安装mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server</div><div class="line">sudo apt-get isntall mysql-client</div><div class="line">sudo apt-get install libmysqlclient-dev</div></pre></td></tr></table></figure>
<p>第一部会提示输入密码。经过以上三部，如无意外，mysql就配置好了。</p>
<h3 id="二、安装node"><a href="#二、安装node" class="headerlink" title="二、安装node"></a>二、安装node</h3><p>偷个懒先<sudo su="">进入root模式，大家不要学我，这样不好不好。(补：一下方法是使用ubuntu自带的node包进行安装，node版本可能比较低，可跳过，使用源码安装)</sudo></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt-get install -y python-software-properties software-properties-common </div><div class="line">add-apt-repository ppa:chris-lea/node.js</div><div class="line">apt-get update</div><div class="line">apt-get install nodejs</div></pre></td></tr></table></figure>
<p>安装过程有那么一些些慢。zzzZZZ……</p>
<p>然而，安装完发现node版本低到离谱，只能从官网下载新版本源码，手动安装。如果下载过于缓慢，可以先上传到git，再从git上下载。(如<a href="https://nodejs.org/dist/v6.10.0/node-v6.10.0.tar.gz" target="_blank" rel="external">https://nodejs.org/dist/v6.10.0/node-v6.10.0.tar.gz</a>)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">apt-get remove nodejs 			<span class="comment"># 先将原本的一波带走</span></div><div class="line">wget https://xxxxxxxx 			<span class="comment"># 下载node源码</span></div><div class="line">tar zxvf [<span class="built_in">source</span>] 				<span class="comment"># 解压</span></div><div class="line">apt-get install g++ make 		<span class="comment"># 安装编译工具</span></div><div class="line"><span class="built_in">cd</span> [<span class="built_in">source</span>]</div><div class="line">./configure</div><div class="line">make 							<span class="comment"># 完成之后找到&lt;node&gt;应用程序的地址</span></div><div class="line">make install</div><div class="line">ln -s [源地址] /usr/bin/node	<span class="comment"># 软链接到/usr/bin/以作用于全局</span></div></pre></td></tr></table></figure>
<p>然后准备安装npm，先安装curl：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get install curl</div><div class="line">curl -L https://npmjs.org/install.sh | sh   </div><div class="line">ln -s [源地址] /usr/bin/npm</div></pre></td></tr></table></figure>
<p>然而问题又出现了，npm的下载速度慢得实在蛋疼，故又还得下载cnpm。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line">ln -s [源地址] /usr/bin/cnpm</div></pre></td></tr></table></figure>
<h3 id="三、安装git"><a href="#三、安装git" class="headerlink" title="三、安装git"></a>三、安装git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt-get install git</div></pre></td></tr></table></figure>
<h3 id="四、安装nginx"><a href="#四、安装nginx" class="headerlink" title="四、安装nginx"></a>四、安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install nginx</div></pre></td></tr></table></figure>
<p>一条命令足以，安装nginx主要用于静态资源的管理和反向代理，其实只有node服务器也是可以的。</p>
<p>安装完成后执行： <i>/etc/init.d/nginx  start</i> 即可启动服务器。</p>
<p>默认的web文件路径为 <em>/usr/share/nginx/html</em>，个人不大习惯，想改一改。</p>
<p>用 <i>ngnix -t</i> 可找到ngnix.conf配置文件的路径，然后用vim编辑。</p>
<p>如果没有server段，则在http{}内自己添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">server &#123;   </div><div class="line"></div><div class="line">    listen       80;        </div><div class="line"></div><div class="line">    server_name  www.xx.com;</div><div class="line"></div><div class="line">        #设定本虚拟主机的访问日志      </div><div class="line"></div><div class="line">  #access_log  logs/www.xx.com.access.log  main;</div><div class="line"></div><div class="line">  location / &#123;       </div><div class="line"></div><div class="line">      root   /var/www/;     </div><div class="line"></div><div class="line">      index index.php index.html index.htm;  </div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  location ~ \.php$ &#123;</div><div class="line"></div><div class="line">      fastcgi_pass 127.0.0.1:9000 ###或者使用socket，要与www.conf中同步</div><div class="line"></div><div class="line">      fastcgi_index index.php</div><div class="line"></div><div class="line">      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line"></div><div class="line">      include fastcgi_params;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者直接更改nginx的默认文件<em>/etc/nginx/sites-available/default</em>，修改对应的server、location，<i>/etc/init.d/nginx restart</i> 重启服务器即可</p>
<h3 id="五、配置php环境"><a href="#五、配置php环境" class="headerlink" title="五、配置php环境"></a>五、配置php环境</h3><p>官网下载php源码包，安装过程基本同node，略……</p>
<p>php源码编译之前要安装libxml2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install libxml2* -y</div></pre></td></tr></table></figure>
<p>对于php7，<strong>what is very important!!!</strong></p>
<p>编译时使用 <i>./configure –enable-fpm</i></p>
<p>php7自带fpm，无需另外下载。下载好之后开始配置。找到php-fpm.conf.default文件，一般位于<em>/usr/local/etc/</em>下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp php-fpm.conf.default php-fpm.conf</div><div class="line">vim php-fpm.conf</div></pre></td></tr></table></figure>
<p>将error_log注释打开，将include引向正确地址如：<em>include /usr/local/etc/php-fpm.d/*.conf</em></p>
<p>找到www.conf.default文件，一般位于<em>/usr/local/etc/php-fpm.d/</em>下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp www.conf.default www.conf</div><div class="line">vim www.conf</div></pre></td></tr></table></figure>
<p>将user和group中的nobody改为<em>www-data</em>,执行<i>/usr/local/sbin/php-fpm</i>启动fpm</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>原本配置过一次腾讯云的服务器了，当时弄了好几天才弄好，结果实在是懒，几个月没搭理，就被腾讯给回收了，香菇。。。为了方便以后配置，故整合了一下网络资源，写下了此博客，无奈。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;零、域名绑定&quot;&gt;&lt;a href=&quot;#零、域名绑定&quot; class=&quot;headerlink&quot; title=&quot;零、域名绑定&quot;&gt;&lt;/a&gt;零、域名绑定&lt;/h3&gt;&lt;p&gt;从腾讯云服务的云解析里解析域名并绑定服务器公网即可。&lt;/p&gt;
&lt;h3 id=&quot;一、安装mysql&quot;&gt;&lt;a h
    
    </summary>
    
    
      <category term="Configure" scheme="https://willbean.github.io/tags/Configure/"/>
    
      <category term="Cloud Server" scheme="https://willbean.github.io/tags/Cloud-Server/"/>
    
      <category term="Ubuntu" scheme="https://willbean.github.io/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
